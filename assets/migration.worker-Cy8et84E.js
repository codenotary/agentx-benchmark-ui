class g{static instance;db=null;collection=null;initPromise=null;jsonicModule=null;constructor(){}static getInstance(){return g.instance||(g.instance=new g),g.instance}async initialize(){if(!this.db)return this.initPromise||(this.initPromise=this.performInitialization()),this.initPromise}async performInitialization(){const t=performance.now();console.log("[JSONIC v3.3] Starting initialization..."),console.log("[JSONIC] Environment:",{isDev:!1,baseUrl:"/agentx-benchmark-ui/",mode:"production",location:typeof window<"u"?window.location.href:"worker"});try{const e="/agentx-benchmark-ui/",n=typeof window>"u"&&typeof self<"u";let a;n?a=`${e}jsonic-worker-wrapper.js`:a=`${e}jsonic-wrapper-v3.esm.js`,console.log("[JSONIC] Loading wrapper from:",a);const c=(await import(a)).default;if(!c)throw new Error("JSONIC module not found");const d=performance.now();this.db=await c.createDatabase({name:"agentx_benchmark",persistence:!1,enablePersistence:!1}),console.log(`[JSONIC] Database created in ${(performance.now()-d).toFixed(2)}ms`),console.log("[JSONIC v3.3] Initialized successfully");const l=performance.now()-t;console.log(`[JSONIC] Total initialization time: ${l.toFixed(2)}ms`),l>1e3&&console.warn(`[JSONIC] ⚠️ Slow initialization: ${l.toFixed(2)}ms`)}catch(e){throw console.error("[JSONIC] Failed to initialize:",e),console.error(`[JSONIC] Failed after ${(performance.now()-t).toFixed(2)}ms`),e}}async getDatabase(){if(this.db||await this.initialize(),!this.db)throw new Error("JSONIC database not initialized");return this.db}async getCollection(){return await this.getDatabase()}async insert(t){return await(await this.getDatabase()).insert(t)}async get(t){return(await this.getCollection()).findOne({_id:t})}async update(t,e){await(await this.getCollection()).updateOne({_id:t},{$set:e})}async delete(t){await(await this.getCollection()).deleteOne({_id:t})}async listIds(){return(await(await this.getCollection()).find({},{projection:{_id:1}})).map(n=>n._id)}async getStats(){return{documentCount:await this.count(),collectionName:"benchmarks"}}async query(t){return(await(await this.getCollection()).find({})).filter(t)}async findDocuments(t,e){const n=await this.getDatabase();console.log("[JSONIC-SERVICE] findDocuments called with filter:",t,"options:",e);const a=await n.list();if(console.log("[JSONIC-SERVICE] Total IDs in database:",a.length),a.length>0){const c=await n.get(a[0]);console.log("[JSONIC-SERVICE] First document from DB:",c),console.log("[JSONIC-SERVICE] First document keys:",c?Object.keys(c):"null")}const i=await n.query(t,e);return console.log("[JSONIC-SERVICE] findDocuments returned:",i.length,"documents"),i.length>0&&console.log("[JSONIC-SERVICE] First result:",i[0]),i}async findOne(t){return(await this.getDatabase()).findOne(t)}async find(t={},e){return(await this.getDatabase()).query(t,e)}async insertMany(t){return await(await this.getDatabase()).insertMany(t)}async updateMany(t,e){return(await this.getCollection()).updateMany(t,e)}async deleteMany(t){return(await this.getCollection()).deleteMany(t)}async aggregate(t){return(await this.getCollection()).aggregate(t)}async count(t={}){return(await(await this.getDatabase()).query(t)).length}async getBenchmarkStats(t){const e=[];return t&&e.push({$match:{testId:t}}),e.push({$group:{_id:"$testId",avgDuration:{$avg:"$duration"},minDuration:{$min:"$duration"},maxDuration:{$max:"$duration"},totalRuns:{$sum:1},successCount:{$sum:{$cond:[{$eq:["$status","success"]},1,0]}},failureCount:{$sum:{$cond:[{$eq:["$status","failure"]},1,0]}}}},{$sort:{totalRuns:-1}}),this.aggregate(e)}}const f=g.getInstance(),u=r=>{self.postMessage({type:"progress",payload:r})},w=async()=>{try{console.log("🔧 WORKER: Starting JSONIC migration..."),u({phase:"loading",current:0,total:100,message:"Loading data in background...",percentage:10});const r="/agentx-benchmark-ui/",t=new URL(`${r}data/database.json`,self.location.origin).href,e=await fetch(t);if(!e.ok)throw new Error(`Failed to fetch database.json: ${e.status}`);const n=await e.json(),a=(n.benchmark_runs?.length||0)+(n.model_performance?.length||0)+(n.test_results?.length||0)+(n.performance_trends?.length||0);console.log(`🔧 WORKER: Processing ${a} documents`),u({phase:"migrating",current:0,total:a,message:"Initializing JSONIC in worker...",percentage:15}),await f.initialize();let i=0;const c=50,d=async o=>{for(let s=0;s<o.length;s+=c){const m=o.slice(s,Math.min(s+c,o.length));await Promise.all(m.map(p=>f.insert(p))),i+=m.length;const h=20+i/a*70;u({phase:"migrating",current:i,total:a,message:`Processing documents... (${i}/${a})`,percentage:h})}},l=(o,s,m)=>({_type:o,_runId:m,_timestamp:new Date().toISOString(),...s});if(n.benchmark_runs){const o=n.benchmark_runs.map(s=>l("benchmark_run",s));await d(o),console.log(`🔧 WORKER: Migrated ${o.length} benchmark runs`)}if(n.model_performance){const o=n.model_performance.map(s=>l("model_performance",s,s.run_id));await d(o),console.log(`🔧 WORKER: Migrated ${o.length} model performance records`)}if(n.test_results){const o=n.test_results.map(s=>l("test_result",s,s.run_id));await d(o),console.log(`🔧 WORKER: Migrated ${o.length} test results`)}if(n.performance_trends){const o=n.performance_trends.map(s=>l("performance_trend",s));await d(o),console.log(`🔧 WORKER: Migrated ${o.length} performance trends`)}u({phase:"complete",current:a,total:a,message:`✅ Migration complete! ${a} documents processed.`,percentage:100}),console.log(`🎉 WORKER: Migration successful - ${a} documents`),self.postMessage({type:"migrationComplete",payload:!0})}catch(r){console.error("❌ WORKER: Migration failed:",r),u({phase:"error",current:0,total:100,message:r instanceof Error?r.message:"Unknown worker error",percentage:0}),self.postMessage({type:"migrationComplete",payload:!1})}};self.onmessage=r=>{r.data.type==="startMigration"&&w()};
//# sourceMappingURL=migration.worker-Cy8et84E.js.map

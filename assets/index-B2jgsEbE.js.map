{"version":3,"mappings":"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","names":["JsonicService","initStartTime","JSONICModule","__vitePreload","dbCreateStartTime","npmError","baseUrl","isWorker","jsonicUrl","module","totalInitTime","error","data","id","doc","filter","options","documents","update","pipeline","testId","jsonicService","fetchBenchmarkRunsJsonic","_type","_runId","_timestamp","runData","fetchModelPerformanceJsonic","runId","latestRunId","runs","performances","perfData","uniqueModels","perf","key","existing","fetchTestResultsJsonic","testData","fetchPerformanceTrendsJsonic","sevenDaysAgo","isoDate","trendData","fetchCategoryPerformanceJsonic","targetRunId","testResults","categoryMap","test","results","p","worker","checkAndMigrateWorker","onProgress","resolve","reject","MigrationWorker","event","initialized","initializationPromise","migrationProgressCallback","setMigrationProgressCallback","callback","ensureInitialized","fetchBenchmarkRuns","fetchModelPerformance","fetchTestResults","fetchPerformanceTrends","fetchCategoryPerformance","API_BASE","jsonicApi.fetchBenchmarkRuns","jsonicApi.fetchModelPerformance","jsonicApi.fetchTestResults","jsonicApi.fetchPerformanceTrends","jsonicApi.fetchCategoryPerformance","cn","inputs","twMerge","clsx","formatDuration","ms","formatCost","usd","formatPercentage","value","formatTokens","tokens","MetricCard","title","icon","trend","format","invertTrend","formatValue","getTrendIcon","jsx","Minus","TrendingUp","TrendingDown","getTrendColor","isPositive","jsxs","PerformanceChart","performance","metric","modelName","formatTooltipValue","getYAxisLabel","ResponsiveContainer","BarChart","CartesianGrid","XAxis","YAxis","Tooltip","Bar","Fragment","ModelComparisonTable","sortedPerformance","a","b","getBadgeColor","successRate","model","CategoryBreakdown","categories","categoryData","acc","cat","COLORS","CustomTooltip","active","payload","PieChart","Pie","name","percent","_entry","index","Cell","RecentRuns","getStatusIcon","run","CheckCircle","Clock","XCircle","getStatusColor","ChevronRight","TrendIndicators","trends","regressions","t","improvements","formatModelName","provider","AlertTriangle","idx","TestResultsTable","setTestResults","useState","loading","setLoading","expandedRows","setExpandedRows","setFilter","sortBy","setSortBy","sortOrder","setSortOrder","useEffect","fetchTestResultsData","generateMockTestResults","toggleRow","newExpanded","sortedResults","result","comparison","r","success","getCategoryIcon","category","Hash","Code","FileText","getCategoryColor","e","by","order","ChevronUp","ChevronDown","prompts","_","i","PromptSummary","expandedPrompt","setExpandedPrompt","isLoading","useQuery","promptStats","promptMap","stats","providerKey","Zap","Activity","AlertCircle","prompt","isExpanded","Dashboard","isTestResultsExpanded","setIsTestResultsExpanded","isPromptsExpanded","setIsPromptsExpanded","isModelComparisonExpanded","setIsModelComparisonExpanded","runsLoading","runsError","perfLoading","perfError","trendsLoading","latestRun","totalTests","avgTTFT","totalCost","Link","DollarSign","JsonicBenchmark","container","iframe","basePath","ArrowLeft","LoadingOverlay","phase","current","total","message","percentage","onComplete","isVisible","setIsVisible","isAnimating","setIsAnimating","timer","getIcon","Loader2","Database","getProgressColor","performSimpleMigration","response","jsonData","totalDocs","processed","addMetadata","type","db","benchmarkDocs","parsed","promises","perfDocs","testDocs","chunkSize","chunk","trendDocs","finalStats","queryClient","QueryClient","AppRouter","migrationProgress","setMigrationProgress","isReady","setIsReady","currentPath","setCurrentPath","path","progress","QueryClientProvider","Router","Routes","Route","ReactQueryDevtools","App","createRoot","StrictMode"],"ignoreList":[],"sources":["../../src/services/jsonicService.ts","../../src/services/jsonicApi.ts","../../src/services/workerMigration.ts","../../src/services/api-jsonic.ts","../../src/services/api.ts","../../src/lib/utils.ts","../../src/components/MetricCard.tsx","../../src/components/PerformanceChart.tsx","../../src/components/ModelComparisonTable.tsx","../../src/components/CategoryBreakdown.tsx","../../src/components/RecentRuns.tsx","../../src/components/TrendIndicators.tsx","../../src/components/TestResultsTable.tsx","../../src/components/PromptSummary.tsx","../../src/components/Dashboard.tsx","../../src/components/JsonicBenchmark.tsx","../../src/components/LoadingOverlay.tsx","../../src/services/simpleMigration.ts","../../src/components/AppRouter.tsx","../../src/App.tsx","../../src/main.tsx"],"sourcesContent":["// JSONIC v3.3 Collection-based API\ninterface JsonicCollection {\n  insertOne(doc: any): Promise<{ _id: string }>;\n  insertMany(docs: any[]): Promise<{ insertedIds: string[] }>;\n  findOne(filter: any): Promise<any>;\n  find(filter: any, options?: FindOptions): Promise<any[]>;\n  updateOne(filter: any, update: any): Promise<UpdateResult>;\n  updateMany(filter: any, update: any): Promise<UpdateResult>;\n  deleteOne(filter: any): Promise<DeleteResult>;\n  deleteMany(filter: any): Promise<DeleteResult>;\n  aggregate(pipeline: any[]): Promise<any[]>;\n  count(filter?: any): Promise<number>;\n}\n\ninterface JsonicDatabase {\n  collection(name: string): JsonicCollection;\n  export(): Promise<any>;\n  exportToFile(filename: string): Promise<void>;\n}\n\ninterface FindOptions {\n  limit?: number;\n  skip?: number;\n  sort?: Record<string, 1 | -1>;\n  projection?: Record<string, 0 | 1>;\n}\n\ninterface UpdateResult {\n  matchedCount: number;\n  modifiedCount: number;\n}\n\ninterface DeleteResult {\n  deletedCount: number;\n}\n\n// JSONIC v3.3 API\ninterface JSONIC {\n  create(options?: {\n    name?: string;\n    version?: number;\n    persistence?: boolean;\n    persistenceConfig?: {\n      wasmPath?: string;\n      workerPath?: string;\n      snapshotInterval?: number;\n    };\n    crossTabSync?: boolean;\n    syncChannel?: string;\n  }): Promise<JsonicDatabase>;\n}\n\nclass JsonicService {\n  private static instance: JsonicService;\n  private db: JsonicDatabase | null = null;\n  private collection: JsonicCollection | null = null;\n  private initPromise: Promise<void> | null = null;\n  private jsonicModule: JSONIC | null = null;\n\n  private constructor() {}\n\n  static getInstance(): JsonicService {\n    if (!JsonicService.instance) {\n      JsonicService.instance = new JsonicService();\n    }\n    return JsonicService.instance;\n  }\n  \n  async initialize(): Promise<void> {\n    if (this.db) return;\n    \n    if (!this.initPromise) {\n      this.initPromise = this.performInitialization();\n    }\n    \n    return this.initPromise;\n  }\n  \n  private async performInitialization(): Promise<void> {\n    const initStartTime = performance.now();\n    console.log('[JSONIC v3.3] Starting initialization...');\n    console.log('[JSONIC] Environment:', {\n      isDev: import.meta.env.DEV,\n      baseUrl: import.meta.env.BASE_URL,\n      mode: import.meta.env.MODE,\n      location: typeof window !== 'undefined' ? window.location.href : 'worker',\n    });\n\n    try {\n      // Try to load JSONIC v3.3 from the npm package\n      // Falls back to legacy wrappers if not available\n      try {\n        console.log('[JSONIC] Attempting to load jsonic-db from npm package...');\n        const { JSONIC: JSONICModule } = await import('jsonic-db');\n\n        // Create database using v3.3 API\n        const dbCreateStartTime = performance.now();\n        this.db = await JSONICModule.create({\n          name: 'agentx_benchmark',\n          persistence: false, // Disabled for faster development\n          crossTabSync: false\n        });\n        console.log(`[JSONIC] Database created in ${(performance.now() - dbCreateStartTime).toFixed(2)}ms`);\n\n        // Get default collection for benchmarks\n        this.collection = this.db.collection('benchmarks');\n\n        console.log('[JSONIC v3.3] Initialized successfully with new API');\n\n      } catch (npmError) {\n        console.warn('[JSONIC] npm package not available, falling back to legacy wrapper:', npmError);\n\n        // Fallback to legacy wrapper implementation\n        const baseUrl = import.meta.env.BASE_URL || '/';\n        const isWorker = typeof window === 'undefined' && typeof self !== 'undefined';\n\n        let jsonicUrl: string;\n        if (isWorker) {\n          jsonicUrl = `${baseUrl}jsonic-worker-wrapper.js`;\n        } else {\n          jsonicUrl = import.meta.env.DEV\n            ? `${self.location ? self.location.origin : 'http://localhost:5173'}/jsonic-hybrid/index.js`\n            : `${baseUrl}jsonic-hybrid/index.js`;\n        }\n\n        console.log('[JSONIC] Loading legacy wrapper from:', jsonicUrl);\n\n        const module = await import(/* @vite-ignore */ jsonicUrl) as { default: JSONIC };\n        this.jsonicModule = module.default;\n\n        if (!this.jsonicModule) {\n          throw new Error('JSONIC module not found');\n        }\n\n        const dbCreateStartTime = performance.now();\n        this.db = await this.jsonicModule.create({\n          name: 'agentx_benchmark',\n          persistence: false\n        });\n        console.log(`[JSONIC] Legacy database created in ${(performance.now() - dbCreateStartTime).toFixed(2)}ms`);\n\n        this.collection = this.db.collection('benchmarks');\n      }\n\n      const totalInitTime = performance.now() - initStartTime;\n      console.log(`[JSONIC] Total initialization time: ${totalInitTime.toFixed(2)}ms`);\n\n      if (totalInitTime > 1000) {\n        console.warn(`[JSONIC] ⚠️ Slow initialization: ${totalInitTime.toFixed(2)}ms`);\n      }\n\n    } catch (error) {\n      console.error('[JSONIC] Failed to initialize:', error);\n      console.error(`[JSONIC] Failed after ${(performance.now() - initStartTime).toFixed(2)}ms`);\n      throw error;\n    }\n  }\n  \n  async getDatabase(): Promise<JsonicDatabase> {\n    if (!this.db) {\n      await this.initialize();\n    }\n\n    if (!this.db) {\n      throw new Error('JSONIC database not initialized');\n    }\n\n    return this.db;\n  }\n\n  async getCollection(): Promise<JsonicCollection> {\n    if (!this.collection) {\n      await this.initialize();\n    }\n\n    if (!this.collection) {\n      throw new Error('JSONIC collection not initialized');\n    }\n\n    return this.collection;\n  }\n\n  // Legacy compatibility methods - converted to collection API\n  async insert(data: any): Promise<string> {\n    const coll = await this.getCollection();\n    const result = await coll.insertOne(data);\n    return result._id;\n  }\n\n  async get(id: string): Promise<any> {\n    const coll = await this.getCollection();\n    return coll.findOne({ _id: id });\n  }\n\n  async update(id: string, data: any): Promise<void> {\n    const coll = await this.getCollection();\n    await coll.updateOne({ _id: id }, { $set: data });\n  }\n\n  async delete(id: string): Promise<void> {\n    const coll = await this.getCollection();\n    await coll.deleteOne({ _id: id });\n  }\n\n  async listIds(): Promise<string[]> {\n    const coll = await this.getCollection();\n    const docs = await coll.find({}, { projection: { _id: 1 } });\n    return docs.map(doc => doc._id);\n  }\n\n  async getStats(): Promise<any> {\n    const coll = await this.getCollection();\n    const count = await coll.count();\n    return {\n      documentCount: count,\n      collectionName: 'benchmarks'\n    };\n  }\n\n  async query(filter: (item: any) => boolean): Promise<any[]> {\n    const coll = await this.getCollection();\n    const docs = await coll.find({});\n    return docs.filter(filter);\n  }\n\n  // Collection-based query methods (v3.3 API)\n  async findDocuments(filter: any, options?: FindOptions): Promise<any[]> {\n    const coll = await this.getCollection();\n    return coll.find(filter, options);\n  }\n\n  async findOne(filter: any): Promise<any> {\n    const coll = await this.getCollection();\n    return coll.findOne(filter);\n  }\n\n  async find(filter: any = {}, options?: FindOptions): Promise<any[]> {\n    const coll = await this.getCollection();\n    return coll.find(filter, options);\n  }\n\n  // Batch operations (v3.3 API)\n  async insertMany(documents: any[]): Promise<string[]> {\n    const coll = await this.getCollection();\n    const result = await coll.insertMany(documents);\n    return result.insertedIds;\n  }\n\n  async updateMany(filter: any, update: any): Promise<UpdateResult> {\n    const coll = await this.getCollection();\n    return coll.updateMany(filter, update);\n  }\n\n  async deleteMany(filter: any): Promise<DeleteResult> {\n    const coll = await this.getCollection();\n    return coll.deleteMany(filter);\n  }\n\n  // Aggregation pipeline (v3.3 API)\n  async aggregate(pipeline: any[]): Promise<any[]> {\n    const coll = await this.getCollection();\n    return coll.aggregate(pipeline);\n  }\n\n  // Count documents\n  async count(filter: any = {}): Promise<number> {\n    const coll = await this.getCollection();\n    return coll.count(filter);\n  }\n\n  // Helper method for benchmark statistics using aggregation\n  async getBenchmarkStats(testId?: string): Promise<any> {\n    const pipeline: any[] = [];\n    \n    if (testId) {\n      pipeline.push({ $match: { testId } });\n    }\n    \n    pipeline.push(\n      {\n        $group: {\n          _id: '$testId',\n          avgDuration: { $avg: '$duration' },\n          minDuration: { $min: '$duration' },\n          maxDuration: { $max: '$duration' },\n          totalRuns: { $sum: 1 },\n          successCount: { $sum: { $cond: [{ $eq: ['$status', 'success'] }, 1, 0] } },\n          failureCount: { $sum: { $cond: [{ $eq: ['$status', 'failure'] }, 1, 0] } }\n        }\n      },\n      {\n        $sort: { totalRuns: -1 }\n      }\n    );\n    \n    return this.aggregate(pipeline);\n  }\n}\n\nexport const jsonicService = JsonicService.getInstance();","import type {\n  BenchmarkRun,\n  ModelPerformance,\n  TestResult,\n  PerformanceTrend,\n  CategoryPerformance\n} from '../types/benchmark';\n\nimport { jsonicService } from './jsonicService';\n\n// Helper to create document with type tagging\nfunction createDocument(type: string, data: any, runId?: string): any {\n  return {\n    _type: type,\n    _runId: runId,\n    _timestamp: new Date().toISOString(),\n    ...data\n  };\n}\n\nexport async function storeBenchmarkRun(run: BenchmarkRun): Promise<string> {\n  const doc = createDocument('benchmark_run', run);\n  return await jsonicService.insert(doc);\n}\n\nexport async function storeModelPerformance(perf: ModelPerformance, runId: string): Promise<string> {\n  const doc = createDocument('model_performance', perf, runId);\n  return await jsonicService.insert(doc);\n}\n\nexport async function storeTestResult(test: TestResult, runId: string): Promise<string> {\n  const doc = createDocument('test_result', test, runId);\n  return await jsonicService.insert(doc);\n}\n\nexport async function fetchBenchmarkRunsJsonic(): Promise<BenchmarkRun[]> {\n  // Use MongoDB-like query with native sorting (v3.3 format)\n  const docs = await jsonicService.findDocuments(\n    { _type: 'benchmark_run' },\n    { sort: { timestamp: -1 } }\n  );\n\n  const runs: BenchmarkRun[] = docs.map(doc => {\n    const { id, _type, _runId, _timestamp, ...runData } = doc;\n    return runData as BenchmarkRun;\n  });\n\n  return runs;\n}\n\nexport async function fetchModelPerformanceJsonic(runId?: string): Promise<ModelPerformance[]> {\n  let latestRunId = runId;\n  \n  // If no runId specified or 'latest', find the latest run\n  if (!runId || runId === 'latest') {\n    const runs = await fetchBenchmarkRunsJsonic();\n    if (runs.length > 0) {\n      latestRunId = runs[0].run_id;\n    }\n  }\n  \n  // Use MongoDB-like query with compound filter and sorting (v3.3 format)\n  const docs = await jsonicService.findDocuments(\n    { _type: 'model_performance', _runId: latestRunId },\n    { sort: { provider: 1, model: 1 } }\n  );\n  \n  const performances: ModelPerformance[] = docs.map(doc => {\n    const { id, _type, _runId, _timestamp, ...perfData } = doc;\n    return perfData as ModelPerformance;\n  });\n  \n  // Group by unique model+provider and aggregate data\n  const uniqueModels = new Map<string, ModelPerformance>();\n  \n  performances.forEach(perf => {\n    const key = `${perf.provider}-${perf.model}`;\n    const existing = uniqueModels.get(key);\n    \n    if (!existing) {\n      uniqueModels.set(key, perf);\n    } else {\n      // Aggregate data - take averages and sums where appropriate\n      uniqueModels.set(key, {\n        ...existing,\n        total_tests: existing.total_tests + perf.total_tests,\n        successful_tests: existing.successful_tests + perf.successful_tests,\n        failed_tests: existing.failed_tests + perf.failed_tests,\n        avg_ttft_ms: (existing.avg_ttft_ms + perf.avg_ttft_ms) / 2,\n        min_ttft_ms: Math.min(existing.min_ttft_ms, perf.min_ttft_ms),\n        max_ttft_ms: Math.max(existing.max_ttft_ms, perf.max_ttft_ms),\n        avg_total_time_ms: (existing.avg_total_time_ms + perf.avg_total_time_ms) / 2,\n        total_tokens_generated: existing.total_tokens_generated + perf.total_tokens_generated,\n        avg_tokens_per_second: (existing.avg_tokens_per_second + perf.avg_tokens_per_second) / 2,\n        avg_quality_score: (existing.avg_quality_score + perf.avg_quality_score) / 2,\n        cost_per_1k_tokens: perf.cost_per_1k_tokens, // Keep latest\n        success_rate: ((existing.successful_tests + perf.successful_tests) / \n                      (existing.total_tests + perf.total_tests)) * 100\n      });\n    }\n  });\n  \n  return Array.from(uniqueModels.values());\n}\n\nexport async function fetchTestResultsJsonic(runId: string): Promise<TestResult[]> {\n  // Use MongoDB-like query with filtering, sorting, and limit (v3.3 format)\n  const docs = await jsonicService.findDocuments(\n    { _type: 'test_result', _runId: runId },\n    { sort: { timestamp: -1 }, limit: 500 }\n  );\n  \n  const tests: TestResult[] = docs.map(doc => {\n    const { id, _type, _runId, _timestamp, ...testData } = doc;\n    return testData as TestResult;\n  });\n  \n  return tests;\n}\n\nexport async function fetchPerformanceTrendsJsonic(): Promise<PerformanceTrend[]> {\n  // Calculate date 7 days ago\n  const sevenDaysAgo = new Date();\n  sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n  const isoDate = sevenDaysAgo.toISOString();\n  \n  // Use MongoDB-like query with $gte operator for date comparison (v3.3 format)\n  const docs = await jsonicService.findDocuments(\n    {\n      _type: 'performance_trend',\n      recorded_at: { $gte: isoDate }\n    },\n    { sort: { recorded_at: -1 }, limit: 100 }\n  );\n  \n  const trends: PerformanceTrend[] = docs.map(doc => {\n    const { id, _type, _runId, _timestamp, ...trendData } = doc;\n    return trendData as PerformanceTrend;\n  });\n  \n  return trends;\n}\n\nexport async function fetchCategoryPerformanceJsonic(runId?: string): Promise<CategoryPerformance[]> {\n  // Get test results for the run\n  let targetRunId = runId;\n  \n  if (!runId || runId === 'latest') {\n    const runs = await fetchBenchmarkRunsJsonic();\n    if (runs.length > 0) {\n      targetRunId = runs[0].run_id;\n    }\n  }\n  \n  if (!targetRunId) {\n    return [];\n  }\n  \n  const testResults = await fetchTestResultsJsonic(targetRunId);\n  \n  // Group by category, provider, and model to calculate averages\n  const categoryMap = new Map<string, CategoryPerformance>();\n  \n  testResults.forEach(test => {\n    const key = `${test.category}-${test.provider}-${test.model}`;\n    \n    if (!categoryMap.has(key)) {\n      categoryMap.set(key, {\n        category: test.category,\n        provider: test.provider,\n        model: test.model,\n        avg_ttft_ms: 0,\n        avg_total_time_ms: 0,\n        total_tests: 0,\n        success_rate: 0,\n        _ttft_sum: 0,\n        _total_time_sum: 0,\n        _success_count: 0,\n        _test_count: 0\n      } as any);\n    }\n    \n    const perf = categoryMap.get(key) as any;\n    perf._test_count++;\n    perf._ttft_sum += test.time_to_first_token_ms || 0;\n    perf._total_time_sum += test.total_time_ms || 0;\n    if (test.success) perf._success_count++;\n  });\n  \n  // Calculate averages\n  const results: CategoryPerformance[] = [];\n  categoryMap.forEach(perf => {\n    const p = perf as any;\n    results.push({\n      category: p.category,\n      provider: p.provider,\n      model: p.model,\n      avg_ttft_ms: p._test_count > 0 ? p._ttft_sum / p._test_count : 0,\n      avg_total_time_ms: p._test_count > 0 ? p._total_time_sum / p._test_count : 0,\n      total_tests: p._test_count,\n      success_rate: p._test_count > 0 ? (p._success_count / p._test_count) * 100 : 0\n    });\n  });\n  \n  return results;\n}\n\nexport async function fetchStatsJsonic() {\n  const stats = await jsonicService.getStats();\n  \n  const ids = await jsonicService.listIds();\n  \n  const typeCounts = {\n    benchmark_runs: 0,\n    model_performance: 0,\n    test_results: 0,\n    performance_trends: 0\n  };\n  \n  for (const id of ids) {\n    const doc = await jsonicService.get(id);\n    \n    if (doc && doc._type) {\n      switch (doc._type) {\n        case 'benchmark_run':\n          typeCounts.benchmark_runs++;\n          break;\n        case 'model_performance':\n          typeCounts.model_performance++;\n          break;\n        case 'test_result':\n          typeCounts.test_results++;\n          break;\n        case 'performance_trend':\n          typeCounts.performance_trends++;\n          break;\n      }\n    }\n  }\n  \n  return {\n    total_documents: stats?.document_count || ids.length || 0,\n    ...typeCounts\n  };\n}\n\n// Migration function to import existing JSON data\nexport async function migrateJsonDataToJsonic(jsonData: any): Promise<void> {\n  console.log('Starting migration to JSONIC database...');\n  \n  await jsonicService.initialize();\n  \n  let migrated = 0;\n  \n  // Migrate benchmark runs\n  if (jsonData.benchmark_runs) {\n    for (const run of jsonData.benchmark_runs) {\n      await storeBenchmarkRun(run);\n      migrated++;\n    }\n    console.log(`Migrated ${jsonData.benchmark_runs.length} benchmark runs`);\n  }\n  \n  // Migrate model performance\n  if (jsonData.model_performance) {\n    for (const perf of jsonData.model_performance) {\n      await storeModelPerformance(perf, perf.run_id);\n      migrated++;\n    }\n    console.log(`Migrated ${jsonData.model_performance.length} model performance records`);\n  }\n  \n  // Migrate test results\n  if (jsonData.test_results) {\n    for (const test of jsonData.test_results) {\n      await storeTestResult(test, test.run_id);\n      migrated++;\n    }\n    console.log(`Migrated ${jsonData.test_results.length} test results`);\n  }\n  \n  // Store performance trends\n  if (jsonData.performance_trends) {\n    for (const trend of jsonData.performance_trends) {\n      const doc = createDocument('performance_trend', trend);\n      await jsonicService.insert(doc);\n      migrated++;\n    }\n    console.log(`Migrated ${jsonData.performance_trends.length} performance trends`);\n  }\n  \n  console.log(`Migration complete! Total documents migrated: ${migrated}`);\n}","// Web Worker-based migration service for mobile compatibility\n// This ensures JSONIC operations don't block the main UI thread\n\n// Import worker with Vite's special syntax\nimport MigrationWorker from './migration.worker.ts?worker';\n\ninterface MigrationProgress {\n  phase: 'checking' | 'loading' | 'migrating' | 'complete' | 'error';\n  current: number;\n  total: number;\n  message: string;\n  percentage: number;\n}\n\ntype ProgressCallback = (progress: MigrationProgress) => void;\n\nlet worker: Worker | null = null;\n\nexport function checkAndMigrateWorker(onProgress?: ProgressCallback): Promise<boolean> {\n  console.log('[WORKER-MIGRATION] Starting worker migration check...');\n  console.log('[WORKER-MIGRATION] Browser info:', {\n    userAgent: navigator.userAgent,\n    platform: navigator.platform,\n    vendor: navigator.vendor,\n    language: navigator.language\n  });\n  \n  return new Promise((resolve, reject) => {\n    // Ensure this runs only in the browser\n    if (typeof window === 'undefined') {\n      console.error('[WORKER-MIGRATION] Worker migration only available in browser');\n      return resolve(false);\n    }\n\n    // Check if we already have a worker running\n    if (worker) {\n      console.log('Worker already running, terminating...');\n      worker.terminate();\n      worker = null;\n    }\n\n    try {\n      console.log('[WORKER-MIGRATION] 🚀 Creating JSONIC migration worker...');\n      console.log('[WORKER-MIGRATION] Current URL:', window.location.href);\n      console.log('[WORKER-MIGRATION] Base URL:', import.meta.env.BASE_URL);\n      \n      // Create the worker using the imported constructor\n      worker = new MigrationWorker();\n      console.log('[WORKER-MIGRATION] Worker created successfully');\n\n      worker.onmessage = (event) => {\n        console.log('[WORKER-MIGRATION] Message from worker:', event.data.type, event.data);\n        \n        if (event.data.type === 'progress') {\n          onProgress?.(event.data.payload);\n        } else if (event.data.type === 'migrationComplete') {\n          if (event.data.payload) {\n            console.log('✅ Worker migration completed successfully');\n            resolve(true);\n          } else {\n            console.error('❌ Worker migration failed');\n            reject(new Error('Migration failed in worker'));\n          }\n          \n          // Clean up worker\n          worker?.terminate();\n          worker = null;\n        }\n      };\n\n      worker.onerror = (error) => {\n        console.error('❌ Worker error:', error);\n        onProgress?.({\n          phase: 'error',\n          message: 'Worker failed to initialize',\n          percentage: 0,\n          current: 0,\n          total: 0,\n        });\n        reject(new Error(`Worker error: ${error.message || 'Unknown error'}`));\n        \n        // Clean up worker\n        worker?.terminate();\n        worker = null;\n      };\n\n      worker.onmessageerror = (error) => {\n        console.error('❌ Worker message error:', error);\n        onProgress?.({\n          phase: 'error',\n          message: 'Worker communication error',\n          percentage: 0,\n          current: 0,\n          total: 0,\n        });\n        reject(new Error('Worker communication error'));\n        \n        // Clean up worker\n        worker?.terminate();\n        worker = null;\n      };\n\n      // Start the migration\n      console.log('📤 Starting worker migration...');\n      worker.postMessage({ type: 'startMigration' });\n\n    } catch (error) {\n      console.error('❌ Failed to create worker:', error);\n      onProgress?.({\n        phase: 'error',\n        message: 'Failed to create worker',\n        percentage: 0,\n        current: 0,\n        total: 0,\n      });\n      reject(error);\n    }\n  });\n}\n\n// Cleanup function to terminate worker if needed\nexport function terminateWorker() {\n  if (worker) {\n    console.log('🛑 Terminating migration worker...');\n    worker.terminate();\n    worker = null;\n  }\n}\n\n// Export for backwards compatibility\nexport const checkAndMigrate = checkAndMigrateWorker;","import type {\n  BenchmarkRun,\n  ModelPerformance,\n  TestResult,\n  PerformanceTrend,\n  CategoryPerformance\n} from '../types/benchmark';\n\n// Import JSONIC database functions\nimport {\n  fetchBenchmarkRunsJsonic,\n  fetchModelPerformanceJsonic,\n  fetchTestResultsJsonic,\n  fetchPerformanceTrendsJsonic,\n  fetchCategoryPerformanceJsonic,\n  fetchStatsJsonic\n} from './jsonicApi';\n\n// Import migration utilities - use Web Worker for mobile compatibility\nimport { checkAndMigrateWorker } from './workerMigration';\n\n// Track initialization\nlet initialized = false;\nlet initializationPromise: Promise<boolean> | null = null;\n\n// Progress callback for migration\nlet migrationProgressCallback: ((progress: any) => void) | undefined;\n\nexport function setMigrationProgressCallback(callback: (progress: any) => void) {\n  migrationProgressCallback = callback;\n}\n\nasync function ensureInitialized() {\n  if (initialized) return;\n  \n  // Ensure we only initialize once\n  if (!initializationPromise) {\n    // Use Web Worker migration for mobile and desktop compatibility\n    initializationPromise = checkAndMigrateWorker(migrationProgressCallback);\n  }\n  \n  const success = await initializationPromise;\n  if (success) {\n    initialized = true;\n  }\n}\n\nexport async function fetchBenchmarkRuns(): Promise<BenchmarkRun[]> {\n  console.log('[API-JSONIC] fetchBenchmarkRuns called');\n  try {\n    await ensureInitialized();\n    console.log('[API-JSONIC] Fetching benchmark runs from JSONIC...');\n    const runs = await fetchBenchmarkRunsJsonic();\n    console.log(`[API-JSONIC] Fetched ${runs.length} benchmark runs`);\n    return runs;\n  } catch (error) {\n    console.error('Failed to fetch benchmark runs from JSONIC:', error);\n    throw error;\n  }\n}\n\nexport async function fetchModelPerformance(runId?: string): Promise<ModelPerformance[]> {\n  try {\n    await ensureInitialized();\n    return await fetchModelPerformanceJsonic(runId);\n  } catch (error) {\n    console.error('Failed to fetch model performance from JSONIC:', error);\n    throw error;\n  }\n}\n\nexport async function fetchTestResults(runId: string): Promise<TestResult[]> {\n  try {\n    await ensureInitialized();\n    return await fetchTestResultsJsonic(runId);\n  } catch (error) {\n    console.error('Failed to fetch test results from JSONIC:', error);\n    throw error;\n  }\n}\n\nexport async function fetchPerformanceTrends(): Promise<PerformanceTrend[]> {\n  try {\n    await ensureInitialized();\n    return await fetchPerformanceTrendsJsonic();\n  } catch (error) {\n    console.error('Failed to fetch performance trends from JSONIC:', error);\n    throw error;\n  }\n}\n\nexport async function fetchCategoryPerformance(runId?: string): Promise<CategoryPerformance[]> {\n  try {\n    await ensureInitialized();\n    return await fetchCategoryPerformanceJsonic(runId);\n  } catch (error) {\n    console.error('Failed to fetch category performance from JSONIC:', error);\n    throw error;\n  }\n}\n\nexport async function fetchStats() {\n  try {\n    await ensureInitialized();\n    return await fetchStatsJsonic();\n  } catch (error) {\n    console.error('Failed to fetch stats from JSONIC:', error);\n    throw error;\n  }\n}","import type {\n  BenchmarkRun,\n  ModelPerformance,\n  TestResult,\n  PerformanceTrend,\n  CategoryPerformance\n} from '../types/benchmark';\n\nimport * as jsonicApi from './api-jsonic';\n\n// Use the current hostname when accessing remotely\nconst API_BASE = import.meta.env.VITE_API_URL || \n  (window.location.hostname === 'localhost' \n    ? 'http://localhost:3001/api'\n    : `${window.location.protocol}//${window.location.hostname}:3001/api`);\n\nconsole.log('=== Database Configuration ===');\nconsole.log('API_BASE:', API_BASE);\nconsole.log('Current hostname:', window.location.hostname);\nconsole.log('Using JSONIC database');\nconsole.log('==============================');\n\nexport async function fetchBenchmarkRuns(): Promise<BenchmarkRun[]> {\n  console.log('Fetching benchmark runs from JSONIC');\n  return await jsonicApi.fetchBenchmarkRuns();\n}\n\nexport async function fetchModelPerformance(runId?: string): Promise<ModelPerformance[]> {\n  console.log('Fetching model performance from JSONIC');\n  return await jsonicApi.fetchModelPerformance(runId);\n}\n\nexport async function fetchTestResults(runId: string): Promise<TestResult[]> {\n  console.log('Fetching test results from JSONIC');\n  return await jsonicApi.fetchTestResults(runId);\n}\n\nexport async function fetchPerformanceTrends(): Promise<PerformanceTrend[]> {\n  console.log('Fetching performance trends from JSONIC');\n  return await jsonicApi.fetchPerformanceTrends();\n}\n\nexport async function fetchCategoryPerformance(runId?: string): Promise<CategoryPerformance[]> {\n  console.log('Fetching category performance from JSONIC');\n  return await jsonicApi.fetchCategoryPerformance(runId);\n}\n\nexport async function fetchStats() {\n  console.log('Fetching stats from JSONIC');\n  return await jsonicApi.fetchStats();\n}","import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDuration(ms: number): string {\n  if (ms < 1000) return `${ms.toFixed(0)}ms`;\n  return `${(ms / 1000).toFixed(2)}s`;\n}\n\nexport function formatCost(usd: number): string {\n  if (usd < 0.01) return `$${(usd * 1000).toFixed(2)}/1K`;\n  return `$${usd.toFixed(4)}`;\n}\n\nexport function formatPercentage(value: number): string {\n  return `${value.toFixed(1)}%`;\n}\n\nexport function formatTokens(tokens: number): string {\n  if (tokens < 1000) return tokens.toString();\n  return `${(tokens / 1000).toFixed(1)}K`;\n}\n\nexport function getStatusColor(successRate: number): string {\n  if (successRate >= 95) return 'text-success-500';\n  if (successRate >= 80) return 'text-warning-500';\n  return 'text-error-500';\n}\n\nexport function getTrendIcon(change: number): string {\n  if (Math.abs(change) < 5) return '→';\n  return change > 0 ? '↑' : '↓';\n}\n\nexport function getTrendColor(change: number, isPositiveBetter: boolean = false): string {\n  if (Math.abs(change) < 5) return 'text-gray-500';\n  const isGood = isPositiveBetter ? change > 0 : change < 0;\n  return isGood ? 'text-success-500' : 'text-error-500';\n}","import type { ReactNode } from 'react';\nimport { TrendingUp, TrendingDown, Minus } from 'lucide-react';\nimport { cn } from '../lib/utils';\nimport { formatDuration, formatCost, formatPercentage } from '../lib/utils';\n\ninterface MetricCardProps {\n  title: string;\n  value: number;\n  icon: ReactNode;\n  trend?: number;\n  format: 'number' | 'percentage' | 'duration' | 'currency';\n  invertTrend?: boolean;\n}\n\nexport default function MetricCard({\n  title,\n  value,\n  icon,\n  trend = 0,\n  format,\n  invertTrend = false,\n}: MetricCardProps) {\n  const formatValue = () => {\n    switch (format) {\n      case 'percentage':\n        return formatPercentage(value);\n      case 'duration':\n        return formatDuration(value);\n      case 'currency':\n        return formatCost(value);\n      default:\n        return value.toLocaleString();\n    }\n  };\n\n  const getTrendIcon = () => {\n    if (Math.abs(trend) < 0.5) {\n      return <Minus className=\"h-4 w-4\" />;\n    }\n    return trend > 0 \n      ? <TrendingUp className=\"h-4 w-4\" />\n      : <TrendingDown className=\"h-4 w-4\" />;\n  };\n\n  const getTrendColor = () => {\n    if (Math.abs(trend) < 0.5) return 'text-gray-500';\n    const isPositive = trend > 0;\n    const isGood = invertTrend ? !isPositive : isPositive;\n    return isGood ? 'text-success-500' : 'text-error-500';\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <span className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">\n          {title}\n        </span>\n        <span className=\"text-gray-400 dark:text-gray-500\">\n          {icon}\n        </span>\n      </div>\n      \n      <div className=\"flex items-baseline justify-between\">\n        <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n          {formatValue()}\n        </span>\n        \n        {trend !== 0 && (\n          <div className={cn('flex items-center text-sm', getTrendColor())}>\n            {getTrendIcon()}\n            <span className=\"ml-1\">\n              {Math.abs(trend).toFixed(1)}%\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","import {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from 'recharts';\nimport type { ModelPerformance } from '../types/benchmark';\nimport { formatDuration, formatPercentage } from '../lib/utils';\n\ninterface PerformanceChartProps {\n  performance: ModelPerformance[];\n  title: string;\n  metric: 'ttft' | 'throughput' | 'success' | 'cost';\n}\n\nexport default function PerformanceChart({ performance, title, metric }: PerformanceChartProps) {\n  const data = performance.map(p => {\n    const modelName = p.model.replace(/-\\d{8}$/, '').replace('claude-3-5-', 'Claude ').replace('gemini-', 'Gemini ');\n    \n    switch (metric) {\n      case 'ttft':\n        return {\n          model: modelName,\n          value: p.avg_ttft_ms,\n          min: p.min_ttft_ms,\n          max: p.max_ttft_ms,\n        };\n      case 'throughput':\n        return {\n          model: modelName,\n          value: p.avg_tokens_per_second,\n        };\n      case 'success':\n        return {\n          model: modelName,\n          value: p.success_rate,\n        };\n      case 'cost':\n        return {\n          model: modelName,\n          value: p.cost_per_1k_tokens * 1000,\n        };\n      default:\n        return { model: modelName, value: 0 };\n    }\n  });\n\n\n  const formatTooltipValue = (value: number) => {\n    switch (metric) {\n      case 'ttft':\n      case 'throughput':\n        return formatDuration(value);\n      case 'success':\n        return formatPercentage(value);\n      case 'cost':\n        return `$${value.toFixed(3)}`;\n      default:\n        return value.toFixed(2);\n    }\n  };\n\n  const getYAxisLabel = () => {\n    switch (metric) {\n      case 'ttft':\n        return 'Time (ms)';\n      case 'throughput':\n        return 'Tokens/sec';\n      case 'success':\n        return 'Success Rate (%)';\n      case 'cost':\n        return 'Cost ($/1K tokens)';\n      default:\n        return '';\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        {title}\n      </h3>\n      \n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 40 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n          <XAxis \n            dataKey=\"model\" \n            angle={-45}\n            textAnchor=\"end\"\n            height={100}\n            className=\"text-xs\"\n            tick={{ fill: '#9ca3af' }}\n          />\n          <YAxis \n            label={{ \n              value: getYAxisLabel(), \n              angle: -90, \n              position: 'insideLeft',\n              style: { fill: '#9ca3af', fontSize: 12 }\n            }}\n            tick={{ fill: '#9ca3af' }}\n          />\n          <Tooltip\n            formatter={formatTooltipValue}\n            contentStyle={{\n              backgroundColor: 'rgba(31, 41, 55, 0.95)',\n              border: '1px solid rgba(75, 85, 99, 0.3)',\n              borderRadius: '6px',\n            }}\n            labelStyle={{ color: '#d1d5db' }}\n          />\n          <Bar \n            dataKey=\"value\" \n            fill=\"#3b82f6\"\n            radius={[4, 4, 0, 0]}\n          />\n          {metric === 'ttft' && (\n            <>\n              <Bar \n                dataKey=\"min\" \n                fill=\"#10b981\"\n                radius={[4, 4, 0, 0]}\n                opacity={0.5}\n              />\n              <Bar \n                dataKey=\"max\" \n                fill=\"#ef4444\"\n                radius={[4, 4, 0, 0]}\n                opacity={0.5}\n              />\n            </>\n          )}\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}","import type { ModelPerformance } from '../types/benchmark';\nimport { cn, formatDuration, formatPercentage, formatTokens } from '../lib/utils';\n\ninterface ModelComparisonTableProps {\n  performance: ModelPerformance[];\n}\n\nexport default function ModelComparisonTable({ performance }: ModelComparisonTableProps) {\n  const sortedPerformance = [...performance].sort((a, b) => b.success_rate - a.success_rate);\n\n  const getBadgeColor = (successRate: number) => {\n    if (successRate >= 95) return 'bg-success-50 text-success-700';\n    if (successRate >= 80) return 'bg-warning-50 text-warning-700';\n    return 'bg-error-50 text-error-700';\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n        <thead className=\"bg-gray-50 dark:bg-gray-900\">\n          <tr>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Model\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Success Rate\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Avg TTFT\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Throughput\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Total Tokens\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Cost/1K\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n              Quality\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n          {sortedPerformance.map((model) => (\n            <tr key={`${model.provider}-${model.model}`} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <div>\n                  <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {model.model.replace(/-\\d{8}$/, '')}\n                  </div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    {model.provider}\n                  </div>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                <span className={cn(\n                  'inline-flex px-2 py-1 text-xs font-semibold rounded-full',\n                  getBadgeColor(model.success_rate)\n                )}>\n                  {formatPercentage(model.success_rate)}\n                </span>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                <div className=\"flex flex-col\">\n                  <span>{formatDuration(model.avg_ttft_ms)}</span>\n                  <span className=\"text-xs text-gray-500\">\n                    {formatDuration(model.min_ttft_ms)} - {formatDuration(model.max_ttft_ms)}\n                  </span>\n                </div>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                {model.avg_tokens_per_second.toFixed(1)} tok/s\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                {formatTokens(model.total_tokens_generated)}\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                <span className={cn(\n                  'font-medium',\n                  model.cost_per_1k_tokens < 0.002 ? 'text-success-600' : \n                  model.cost_per_1k_tokens < 0.005 ? 'text-warning-600' : 'text-error-600'\n                )}>\n                  ${(model.cost_per_1k_tokens * 1000).toFixed(3)}\n                </span>\n              </td>\n              <td className=\"px-6 py-4 whitespace-nowrap\">\n                {model.avg_quality_score > 0 ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-1 bg-gray-200 dark:bg-gray-700 rounded-full h-2 w-16\">\n                      <div \n                        className=\"bg-primary-500 h-2 rounded-full\"\n                        style={{ width: `${model.avg_quality_score * 100}%` }}\n                      />\n                    </div>\n                    <span className=\"ml-2 text-xs text-gray-600 dark:text-gray-400\">\n                      {(model.avg_quality_score * 100).toFixed(0)}%\n                    </span>\n                  </div>\n                ) : (\n                  <span className=\"text-xs text-gray-400\">N/A</span>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}","import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';\nimport type { CategoryPerformance } from '../types/benchmark';\nimport { formatDuration, formatPercentage } from '../lib/utils';\n\ninterface CategoryBreakdownProps {\n  categories: CategoryPerformance[];\n}\n\nexport default function CategoryBreakdown({ categories }: CategoryBreakdownProps) {\n  // Group by category and calculate averages\n  const categoryData = categories.reduce((acc, cat) => {\n    if (!acc[cat.category]) {\n      acc[cat.category] = {\n        category: cat.category,\n        avgTTFT: 0,\n        avgSuccessRate: 0,\n        totalTests: 0,\n        count: 0,\n      };\n    }\n    \n    acc[cat.category].avgTTFT += cat.avg_ttft_ms;\n    acc[cat.category].avgSuccessRate += cat.success_rate;\n    acc[cat.category].totalTests += cat.total_tests;\n    acc[cat.category].count++;\n    \n    return acc;\n  }, {} as Record<string, any>);\n\n  const data = Object.values(categoryData).map((cat: any) => ({\n    name: cat.category.charAt(0).toUpperCase() + cat.category.slice(1),\n    value: cat.totalTests,\n    avgTTFT: cat.avgTTFT / cat.count,\n    successRate: cat.avgSuccessRate / cat.count,\n  }));\n\n  const COLORS = [\n    '#3b82f6', // blue\n    '#10b981', // emerald\n    '#f59e0b', // amber\n    '#ef4444', // red\n    '#8b5cf6', // violet\n    '#ec4899', // pink\n  ];\n\n  const CustomTooltip = ({ active, payload }: any) => {\n    if (active && payload && payload[0]) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-gray-900 text-white p-3 rounded-lg shadow-lg border border-gray-700\">\n          <p className=\"font-semibold\">{data.name}</p>\n          <p className=\"text-sm\">Tests: {data.value}</p>\n          <p className=\"text-sm\">Avg TTFT: {formatDuration(data.avgTTFT)}</p>\n          <p className=\"text-sm\">Success: {formatPercentage(data.successRate)}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        Performance by Category\n      </h3>\n      \n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={data}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={({ name, percent }: any) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            outerRadius={80}\n            fill=\"#8884d8\"\n            dataKey=\"value\"\n          >\n            {data.map((_entry, index) => (\n              <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n            ))}\n          </Pie>\n          <Tooltip content={<CustomTooltip />} />\n        </PieChart>\n      </ResponsiveContainer>\n\n      <div className=\"mt-4 space-y-2\">\n        {data.map((cat, index) => (\n          <div key={cat.name} className=\"flex items-center justify-between text-sm\">\n            <div className=\"flex items-center\">\n              <div \n                className=\"w-3 h-3 rounded-full mr-2\"\n                style={{ backgroundColor: COLORS[index % COLORS.length] }}\n              />\n              <span className=\"text-gray-700 dark:text-gray-300\">{cat.name}</span>\n            </div>\n            <div className=\"text-gray-500 dark:text-gray-400\">\n              <span className=\"font-medium\">{cat.value}</span> tests • \n              <span className=\"ml-1\">{formatPercentage(cat.successRate)}</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","import { Clock, CheckCircle, XCircle, ChevronRight } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns';\nimport type { BenchmarkRun } from '../types/benchmark';\nimport { cn, formatPercentage } from '../lib/utils';\n\ninterface RecentRunsProps {\n  runs: BenchmarkRun[];\n}\n\nexport default function RecentRuns({ runs }: RecentRunsProps) {\n  const getStatusIcon = (run: BenchmarkRun) => {\n    const successRate = (run.successful_runs / run.total_runs) * 100;\n    if (successRate >= 95) {\n      return <CheckCircle className=\"h-5 w-5 text-success-500\" />;\n    } else if (successRate >= 80) {\n      return <Clock className=\"h-5 w-5 text-warning-500\" />;\n    } else {\n      return <XCircle className=\"h-5 w-5 text-error-500\" />;\n    }\n  };\n\n  const getStatusColor = (run: BenchmarkRun) => {\n    const successRate = (run.successful_runs / run.total_runs) * 100;\n    if (successRate >= 95) return 'border-success-200 bg-success-50';\n    if (successRate >= 80) return 'border-warning-200 bg-warning-50';\n    return 'border-error-200 bg-error-50';\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        Recent Benchmark Runs\n      </h3>\n      \n      <div className=\"space-y-3\">\n        {runs.slice(0, 5).map((run, index) => (\n          <div\n            key={run.id}\n            className={cn(\n              'flex items-center justify-between p-3 rounded-lg border transition-colors hover:shadow-md cursor-pointer',\n              index === 0 ? getStatusColor(run) : 'border-gray-200 dark:border-gray-700 hover:border-primary-300'\n            )}\n          >\n            <div className=\"flex items-center space-x-3\">\n              {getStatusIcon(run)}\n              <div>\n                <div className=\"font-medium text-gray-900 dark:text-white\">\n                  {run.name || `Benchmark #${run.id}`}\n                </div>\n                <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  {formatDistanceToNow(new Date(run.timestamp), { addSuffix: true })}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"text-right\">\n                <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  {run.successful_runs}/{run.total_runs}\n                </div>\n                <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  {formatPercentage((run.successful_runs / run.total_runs) * 100)} success\n                </div>\n              </div>\n              <ChevronRight className=\"h-5 w-5 text-gray-400\" />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {runs.length > 5 && (\n        <button className=\"mt-4 w-full py-2 text-sm text-primary-600 hover:text-primary-700 font-medium\">\n          View all {runs.length} runs →\n        </button>\n      )}\n    </div>\n  );\n}","import { TrendingUp, TrendingDown, AlertTriangle } from 'lucide-react';\nimport type { PerformanceTrend } from '../types/benchmark';\n\ninterface TrendIndicatorsProps {\n  trends: PerformanceTrend[];\n}\n\nexport default function TrendIndicators({ trends }: TrendIndicatorsProps) {\n  // Find significant trends\n  const regressions = trends.filter(t => t.is_regression);\n  const improvements = trends.filter(t => !t.is_regression && t.change_percentage && t.change_percentage < -10);\n  \n  if (regressions.length === 0 && improvements.length === 0) {\n    return null;\n  }\n\n  const formatModelName = (provider: string, model: string) => {\n    return `${provider}/${model.replace(/-\\d{8}$/, '')}`;\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {regressions.length > 0 && (\n        <div className=\"bg-error-50 dark:bg-error-900/20 border border-error-200 dark:border-error-800 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <AlertTriangle className=\"h-5 w-5 text-error-500 mt-0.5 mr-3 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <h3 className=\"text-sm font-semibold text-error-800 dark:text-error-200 mb-2\">\n                Performance Regressions Detected\n              </h3>\n              <div className=\"space-y-1\">\n                {regressions.slice(0, 3).map((trend, idx) => (\n                  <div key={idx} className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-error-700 dark:text-error-300\">\n                      {formatModelName(trend.provider, trend.model)} - {trend.metric_name}\n                    </span>\n                    <span className=\"font-medium text-error-800 dark:text-error-200\">\n                      <TrendingDown className=\"inline h-4 w-4 mr-1\" />\n                      {Math.abs(trend.change_percentage || 0).toFixed(1)}% slower\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {improvements.length > 0 && (\n        <div className=\"bg-success-50 dark:bg-success-900/20 border border-success-200 dark:border-success-800 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <TrendingUp className=\"h-5 w-5 text-success-500 mt-0.5 mr-3 flex-shrink-0\" />\n            <div className=\"flex-1\">\n              <h3 className=\"text-sm font-semibold text-success-800 dark:text-success-200 mb-2\">\n                Performance Improvements\n              </h3>\n              <div className=\"space-y-1\">\n                {improvements.slice(0, 3).map((trend, idx) => (\n                  <div key={idx} className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-success-700 dark:text-success-300\">\n                      {formatModelName(trend.provider, trend.model)} - {trend.metric_name}\n                    </span>\n                    <span className=\"font-medium text-success-800 dark:text-success-200\">\n                      <TrendingUp className=\"inline h-4 w-4 mr-1\" />\n                      {Math.abs(trend.change_percentage || 0).toFixed(1)}% faster\n                    </span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","import { useState, useEffect } from 'react';\nimport { ChevronDown, ChevronUp, CheckCircle, XCircle, Clock, Code, FileText, Hash } from 'lucide-react';\nimport type { TestResult } from '../types/benchmark';\nimport { cn, formatDuration, formatCost, formatTokens } from '../lib/utils';\nimport { fetchTestResults } from '../services/api-jsonic';\nimport { fetchTestResultsJsonic } from '../services/jsonicApi';\nimport { fetchBenchmarkRunsJsonic } from '../services/jsonicApi';\n\ninterface TestResultsTableProps {\n  runId?: string;\n}\n\nexport default function TestResultsTable({ runId }: TestResultsTableProps) {\n  const [testResults, setTestResults] = useState<TestResult[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [expandedRows, setExpandedRows] = useState<Set<number>>(new Set());\n  const [filter, setFilter] = useState<string>('all');\n  const [sortBy, setSortBy] = useState<'time' | 'tokens' | 'category' | 'status'>('time');\n  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');\n\n  useEffect(() => {\n    fetchTestResultsData();\n  }, [runId]);\n\n  const fetchTestResultsData = async () => {\n    try {\n      setLoading(true);\n      \n      // Use JSONIC API to fetch test results\n      let data: TestResult[];\n      if (runId) {\n        data = await fetchTestResults(runId);\n      } else {\n        // For latest results, get the most recent benchmark run\n        const runs = await fetchBenchmarkRunsJsonic();\n        if (runs && runs.length > 0) {\n          // Sort runs by timestamp and get the most recent\n          const sortedRuns = runs.sort((a, b) => \n            new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()\n          );\n          const latestRunId = sortedRuns[0].run_id;\n          data = await fetchTestResultsJsonic(latestRunId);\n        } else {\n          data = [];\n        }\n      }\n      \n      setTestResults(data);\n    } catch (error) {\n      console.error('Error fetching test results:', error);\n      // Try to use mock data if real data fails  \n      setTestResults(generateMockTestResults());\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleRow = (id: number) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(id)) {\n      newExpanded.delete(id);\n    } else {\n      newExpanded.add(id);\n    }\n    setExpandedRows(newExpanded);\n  };\n\n  const filteredResults = testResults.filter(result => {\n    if (filter === 'all') return true;\n    if (filter === 'success') return result.success;\n    if (filter === 'failed') return !result.success;\n    return result.category === filter;\n  });\n\n  const sortedResults = [...filteredResults].sort((a, b) => {\n    let comparison = 0;\n    switch (sortBy) {\n      case 'time':\n        comparison = a.total_time_ms - b.total_time_ms;\n        break;\n      case 'tokens':\n        comparison = a.tokens_generated - b.tokens_generated;\n        break;\n      case 'category':\n        comparison = a.category.localeCompare(b.category);\n        break;\n      case 'status':\n        comparison = (a.success ? 1 : 0) - (b.success ? 1 : 0);\n        break;\n    }\n    return sortOrder === 'asc' ? comparison : -comparison;\n  });\n\n  const categories = [...new Set(testResults.map(r => r.category))];\n  \n  const getStatusIcon = (success: boolean) => {\n    return success \n      ? <CheckCircle className=\"h-5 w-5 text-success-500\" />\n      : <XCircle className=\"h-5 w-5 text-error-500\" />;\n  };\n\n  const getCategoryIcon = (category: string) => {\n    const icons: Record<string, React.ReactElement> = {\n      math: <Hash className=\"h-4 w-4\" />,\n      coding: <Code className=\"h-4 w-4\" />,\n      technical: <FileText className=\"h-4 w-4\" />,\n      reasoning: <Clock className=\"h-4 w-4\" />,\n    };\n    return icons[category] || <FileText className=\"h-4 w-4\" />;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      math: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300',\n      coding: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300',\n      technical: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',\n      reasoning: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300',\n      creative: 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300',\n      mcp_tools: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300',\n    };\n    return colors[category] || 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-8\">\n        <div className=\"flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600\"></div>\n          <span className=\"ml-3 text-gray-600 dark:text-gray-400\">Loading test results...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n      <div className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Detailed Test Results ({sortedResults.length} tests)\n          </h2>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Filter buttons */}\n            <div className=\"flex items-center space-x-2\">\n              <button\n                onClick={() => setFilter('all')}\n                className={cn(\n                  'px-3 py-1 rounded-md text-sm font-medium transition-colors',\n                  filter === 'all' \n                    ? 'bg-primary-100 text-primary-700 dark:bg-primary-900 dark:text-primary-300'\n                    : 'text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700'\n                )}\n              >\n                All ({testResults.length})\n              </button>\n              <button\n                onClick={() => setFilter('success')}\n                className={cn(\n                  'px-3 py-1 rounded-md text-sm font-medium transition-colors',\n                  filter === 'success'\n                    ? 'bg-success-100 text-success-700 dark:bg-success-900 dark:text-success-300'\n                    : 'text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700'\n                )}\n              >\n                Success ({testResults.filter(r => r.success).length})\n              </button>\n              <button\n                onClick={() => setFilter('failed')}\n                className={cn(\n                  'px-3 py-1 rounded-md text-sm font-medium transition-colors',\n                  filter === 'failed'\n                    ? 'bg-error-100 text-error-700 dark:bg-error-900 dark:text-error-300'\n                    : 'text-gray-600 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700'\n                )}\n              >\n                Failed ({testResults.filter(r => !r.success).length})\n              </button>\n            </div>\n\n            {/* Category filter */}\n            <select\n              value={filter}\n              onChange={(e) => setFilter(e.target.value)}\n              className=\"px-3 py-1 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm\"\n            >\n              <option value=\"all\">All Categories</option>\n              {categories.map(cat => (\n                <option key={cat} value={cat}>{cat}</option>\n              ))}\n            </select>\n\n            {/* Sort options */}\n            <select\n              value={`${sortBy}-${sortOrder}`}\n              onChange={(e) => {\n                const [by, order] = e.target.value.split('-');\n                setSortBy(by as any);\n                setSortOrder(order as any);\n              }}\n              className=\"px-3 py-1 rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-sm\"\n            >\n              <option value=\"time-desc\">Slowest First</option>\n              <option value=\"time-asc\">Fastest First</option>\n              <option value=\"tokens-desc\">Most Tokens</option>\n              <option value=\"tokens-asc\">Least Tokens</option>\n              <option value=\"category-asc\">Category A-Z</option>\n              <option value=\"status-desc\">Success First</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full\">\n          <thead className=\"bg-gray-50 dark:bg-gray-900\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Status\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Model\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Category\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Prompt\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                TTFT\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Total Time\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Tokens\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Cost\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n            {sortedResults.map((result) => (\n              <>\n                <tr key={result.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    {getStatusIcon(result.success)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {result.model.replace(/-\\d{8}$/, '')}\n                      </div>\n                      <div className=\"text-xs text-gray-500 dark:text-gray-400\">\n                        {result.provider} • Iteration {result.iteration}\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={cn(\n                      'inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium',\n                      getCategoryColor(result.category)\n                    )}>\n                      {getCategoryIcon(result.category)}\n                      <span className=\"ml-1\">{result.category}</span>\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <div className=\"max-w-xs truncate text-sm text-gray-900 dark:text-gray-300\">\n                      {result.prompt_text || result.prompt_id}\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                    {formatDuration(result.time_to_first_token_ms)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                    {formatDuration(result.total_time_ms)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                    <div>\n                      <div>{formatTokens(result.tokens_generated)}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {result.tokens_per_second?.toFixed(1)} tok/s\n                      </div>\n                    </div>\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300\">\n                    {formatCost(result.estimated_cost_usd)}\n                  </td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <button\n                      onClick={() => toggleRow(result.id)}\n                      className=\"text-primary-600 hover:text-primary-700 dark:text-primary-400 dark:hover:text-primary-300\"\n                    >\n                      {expandedRows.has(result.id) ? (\n                        <ChevronUp className=\"h-5 w-5\" />\n                      ) : (\n                        <ChevronDown className=\"h-5 w-5\" />\n                      )}\n                    </button>\n                  </td>\n                </tr>\n                \n                {/* Expanded row with response details */}\n                {expandedRows.has(result.id) && (\n                  <tr>\n                    <td colSpan={9} className=\"px-6 py-4 bg-gray-50 dark:bg-gray-900\">\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"font-medium text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                            Full Prompt:\n                          </h4>\n                          <div className=\"bg-white dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700\">\n                            <pre className=\"text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap\">\n                              {result.prompt_text}\n                            </pre>\n                          </div>\n                        </div>\n                        \n                        {result.response && (\n                          <div>\n                            <h4 className=\"font-medium text-sm text-gray-700 dark:text-gray-300 mb-2\">\n                              Response:\n                            </h4>\n                            <div className=\"bg-white dark:bg-gray-800 p-3 rounded-md border border-gray-200 dark:border-gray-700\">\n                              <pre className=\"text-sm text-gray-800 dark:text-gray-200 whitespace-pre-wrap\">\n                                {result.response}\n                              </pre>\n                            </div>\n                          </div>\n                        )}\n                        \n                        {result.error_message && (\n                          <div>\n                            <h4 className=\"font-medium text-sm text-error-700 dark:text-error-300 mb-2\">\n                              Error:\n                            </h4>\n                            <div className=\"bg-error-50 dark:bg-error-900/20 p-3 rounded-md border border-error-200 dark:border-error-800\">\n                              <pre className=\"text-sm text-error-800 dark:text-error-200 whitespace-pre-wrap\">\n                                {result.error_message}\n                              </pre>\n                            </div>\n                          </div>\n                        )}\n                        \n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"text-gray-500 dark:text-gray-400\">Timestamp:</span>\n                            <span className=\"ml-2 text-gray-900 dark:text-gray-200\">\n                              {new Date(result.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          {result.quality_score && (\n                            <div>\n                              <span className=\"text-gray-500 dark:text-gray-400\">Quality Score:</span>\n                              <span className=\"ml-2 text-gray-900 dark:text-gray-200\">\n                                {(result.quality_score * 100).toFixed(1)}%\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n                  </tr>\n                )}\n              </>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {sortedResults.length === 0 && (\n        <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n          No test results found for the selected filter.\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Mock data generator for testing\nfunction generateMockTestResults(): TestResult[] {\n  const categories = ['math', 'coding', 'reasoning', 'technical', 'creative', 'mcp_tools'];\n  const prompts = {\n    math: 'Calculate the factorial of 12',\n    coding: 'Write a Python function to reverse a linked list',\n    reasoning: 'If all birds can fly and penguins are birds, can penguins fly?',\n    technical: 'Explain the difference between TCP and UDP protocols',\n    creative: 'Write a haiku about machine learning',\n    mcp_tools: 'List all virtual machines with more than 16GB RAM'\n  };\n  \n  return Array.from({ length: 20 }, (_, i) => {\n    const category = categories[i % categories.length];\n    const success = Math.random() > 0.15;\n    \n    return {\n      id: i + 1,\n      run_id: `bench-${Date.now()}`,\n      timestamp: new Date(Date.now() - Math.random() * 86400000).toISOString(),\n      provider: ['anthropic', 'gemini', 'ollama'][i % 3],\n      model: ['claude-3-5-haiku-20241022', 'gemini-2.0-flash-exp', 'llama2'][i % 3],\n      prompt_id: `${category}_test`,\n      prompt_text: prompts[category as keyof typeof prompts],\n      category,\n      iteration: (i % 3) + 1,\n      time_to_first_token_ms: 500 + Math.random() * 3000,\n      total_time_ms: 1000 + Math.random() * 5000,\n      tokens_generated: 50 + Math.floor(Math.random() * 500),\n      tokens_per_second: 20 + Math.random() * 30,\n      quality_score: success ? 0.7 + Math.random() * 0.3 : undefined,\n      success,\n      error_message: !success ? 'Rate limit exceeded' : undefined,\n      response: success ? `This is a sample response for ${category} prompt...` : undefined,\n      estimated_cost_usd: Math.random() * 0.01,\n    };\n  });\n}","import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { fetchTestResults } from '../services/api';\nimport { FileText, Hash, Zap, Activity, BarChart, CheckCircle, XCircle, AlertCircle } from 'lucide-react';\nimport type { TestResult } from '../types/benchmark';\n\ninterface PromptSummaryProps {\n  runId?: string;\n}\n\ninterface PromptStats {\n  prompt_id: string;\n  prompt_text: string;\n  category: string;\n  total_tests: number;\n  successful_tests: number;\n  failed_tests: number;\n  avg_time_ms: number;\n  avg_tokens: number;\n  providers: string[];\n}\n\nexport default function PromptSummary({ runId }: PromptSummaryProps) {\n  const [expandedPrompt, setExpandedPrompt] = useState<string | null>(null);\n  \n  const { data: testResults, isLoading } = useQuery({\n    queryKey: ['testResults', runId],\n    queryFn: () => runId ? fetchTestResults(runId) : Promise.resolve([]),\n    enabled: !!runId,\n  });\n\n  const promptStats: PromptStats[] = [];\n  \n  if (testResults) {\n    const promptMap = new Map<string, PromptStats>();\n    \n    testResults.forEach((result: TestResult) => {\n      const key = result.prompt_id;\n      if (!promptMap.has(key)) {\n        promptMap.set(key, {\n          prompt_id: result.prompt_id,\n          prompt_text: result.prompt_text,\n          category: result.category,\n          total_tests: 0,\n          successful_tests: 0,\n          failed_tests: 0,\n          avg_time_ms: 0,\n          avg_tokens: 0,\n          providers: [],\n        });\n      }\n      \n      const stats = promptMap.get(key)!;\n      stats.total_tests++;\n      if (result.success) {\n        stats.successful_tests++;\n      } else {\n        stats.failed_tests++;\n      }\n      stats.avg_time_ms += result.total_time_ms || 0;\n      stats.avg_tokens += result.tokens_generated || 0;\n      \n      const providerKey = `${result.provider}/${result.model}`;\n      if (!stats.providers.includes(providerKey)) {\n        stats.providers.push(providerKey);\n      }\n    });\n    \n    // Calculate averages\n    promptMap.forEach((stats) => {\n      stats.avg_time_ms = stats.avg_time_ms / stats.total_tests;\n      stats.avg_tokens = Math.round(stats.avg_tokens / stats.total_tests);\n    });\n    \n    promptStats.push(...Array.from(promptMap.values()));\n  }\n\n  const getCategoryIcon = (category: string) => {\n    const icons: { [key: string]: React.ReactElement } = {\n      math: <Hash className=\"h-4 w-4\" />,\n      coding: <FileText className=\"h-4 w-4\" />,\n      reasoning: <Zap className=\"h-4 w-4\" />,\n      technical: <Activity className=\"h-4 w-4\" />,\n      creative: <FileText className=\"h-4 w-4\" />,\n      mcp_tools: <BarChart className=\"h-4 w-4\" />,\n    };\n    return icons[category] || <FileText className=\"h-4 w-4\" />;\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: { [key: string]: string } = {\n      math: 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',\n      coding: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',\n      reasoning: 'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200',\n      technical: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',\n      creative: 'bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200',\n      mcp_tools: 'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200',\n    };\n    return colors[category] || 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"animate-pulse space-y-3 p-4\">\n        <div className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n        <div className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n      </div>\n    );\n  }\n\n  if (promptStats.length === 0) {\n    return (\n      <div className=\"p-8 text-center text-gray-500 dark:text-gray-400\">\n        <AlertCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n        <p>No test prompts found for this run</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-3\">\n      <div className=\"mb-4 text-sm text-gray-600 dark:text-gray-400\">\n        <strong>{promptStats.length}</strong> unique prompts tested across <strong>{promptStats.reduce((acc, p) => acc + p.providers.length, 0)}</strong> model configurations\n      </div>\n      \n      {promptStats.map((prompt) => {\n        const successRate = (prompt.successful_tests / prompt.total_tests) * 100;\n        const isExpanded = expandedPrompt === prompt.prompt_id;\n        \n        return (\n          <div\n            key={prompt.prompt_id}\n            className=\"border border-gray-200 dark:border-gray-700 rounded-lg hover:shadow-md transition-shadow\"\n          >\n            <div\n              className=\"p-4 cursor-pointer select-none\"\n              onClick={() => setExpandedPrompt(isExpanded ? null : prompt.prompt_id)}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(prompt.category)}`}>\n                      {getCategoryIcon(prompt.category)}\n                      {prompt.category}\n                    </span>\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      ID: {prompt.prompt_id}\n                    </span>\n                  </div>\n                  \n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white line-clamp-2\">\n                    {prompt.prompt_text}\n                  </p>\n                  \n                  <div className=\"mt-2 flex items-center gap-4 text-xs text-gray-600 dark:text-gray-400\">\n                    <span className=\"flex items-center gap-1\">\n                      {successRate >= 80 ? (\n                        <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                      ) : successRate >= 50 ? (\n                        <AlertCircle className=\"h-3 w-3 text-yellow-500\" />\n                      ) : (\n                        <XCircle className=\"h-3 w-3 text-red-500\" />\n                      )}\n                      {successRate.toFixed(0)}% success\n                    </span>\n                    <span>{prompt.total_tests} runs</span>\n                    <span>{(prompt.avg_time_ms / 1000).toFixed(1)}s avg</span>\n                    <span>{prompt.avg_tokens} tokens avg</span>\n                  </div>\n                </div>\n                \n                <div className=\"ml-4 text-gray-400\">\n                  <svg className={`h-5 w-5 transform transition-transform ${isExpanded ? 'rotate-180' : ''}`} fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n            \n            {isExpanded && (\n              <div className=\"px-4 pb-4 pt-0 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"mt-3 space-y-2\">\n                  <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n                    <strong>Full Prompt:</strong>\n                  </div>\n                  <div className=\"p-3 bg-gray-50 dark:bg-gray-900 rounded text-sm text-gray-700 dark:text-gray-300 font-mono\">\n                    {prompt.prompt_text}\n                  </div>\n                  \n                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                    <div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">Test Results</div>\n                      <div className=\"flex gap-2\">\n                        <span className=\"text-sm text-green-600 dark:text-green-400\">\n                          ✓ {prompt.successful_tests} passed\n                        </span>\n                        <span className=\"text-sm text-red-600 dark:text-red-400\">\n                          ✗ {prompt.failed_tests} failed\n                        </span>\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <div className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">Tested Models</div>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {prompt.providers.map((provider) => (\n                          <span key={provider} className=\"text-xs px-2 py-1 bg-gray-100 dark:bg-gray-800 rounded\">\n                            {provider}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}","import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Link } from 'react-router-dom';\nimport { \n  Activity, \n  Clock, \n  DollarSign,\n  CheckCircle,\n  ChevronDown,\n  ChevronUp,\n  FileText,\n  Zap\n} from 'lucide-react';\nimport { \n  fetchBenchmarkRuns, \n  fetchModelPerformance, \n  fetchPerformanceTrends,\n  fetchCategoryPerformance\n} from '../services/api';\nimport MetricCard from './MetricCard';\nimport PerformanceChart from './PerformanceChart';\nimport ModelComparisonTable from './ModelComparisonTable';\nimport CategoryBreakdown from './CategoryBreakdown';\nimport RecentRuns from './RecentRuns';\nimport TrendIndicators from './TrendIndicators';\nimport TestResultsTable from './TestResultsTable';\nimport PromptSummary from './PromptSummary';\n\nexport default function Dashboard() {\n  useEffect(() => {\n    console.log('[DASHBOARD] Component mounted');\n    console.log('[DASHBOARD] Using API from:', '../services/api');\n  }, []);\n  const [isTestResultsExpanded, setIsTestResultsExpanded] = useState(false);\n  const [isPromptsExpanded, setIsPromptsExpanded] = useState(true);\n  const [isModelComparisonExpanded, setIsModelComparisonExpanded] = useState(true);\n  const { data: runs, isLoading: runsLoading, error: runsError } = useQuery({\n    queryKey: ['benchmarkRuns'],\n    queryFn: () => {\n      console.log('[DASHBOARD] Fetching benchmark runs...');\n      return fetchBenchmarkRuns();\n    },\n    refetchInterval: 60000, // Refresh every minute\n    onSuccess: (data) => {\n      console.log('[DASHBOARD] Benchmark runs loaded:', data?.length || 0, 'runs');\n    },\n    onError: (error) => {\n      console.error('[DASHBOARD] Failed to load benchmark runs:', error);\n    }\n  } as any);\n\n  const { data: performance, isLoading: perfLoading, error: perfError } = useQuery({\n    queryKey: ['modelPerformance'],\n    queryFn: () => {\n      console.log('[DASHBOARD] Fetching model performance...');\n      return fetchModelPerformance();\n    },\n    refetchInterval: 60000,\n    onSuccess: (data) => {\n      console.log('[DASHBOARD] Model performance loaded:', data?.length || 0, 'records');\n    },\n    onError: (error) => {\n      console.error('[DASHBOARD] Failed to load model performance:', error);\n    }\n  } as any);\n\n  const { data: trends, isLoading: trendsLoading } = useQuery({\n    queryKey: ['performanceTrends'],\n    queryFn: fetchPerformanceTrends,\n    refetchInterval: 60000,\n  });\n\n  const { data: categories } = useQuery({\n    queryKey: ['categoryPerformance'],\n    queryFn: () => fetchCategoryPerformance(),\n    refetchInterval: 60000,\n  });\n\n  const latestRun = runs?.[0];\n  const totalTests = latestRun?.total_runs || 0;\n  const successRate = latestRun \n    ? (latestRun.successful_runs / latestRun.total_runs) * 100 \n    : 0;\n  const avgTTFT = performance\n    ? performance.reduce((acc, p) => acc + p.avg_ttft_ms, 0) / performance.length\n    : 0;\n  const totalCost = performance\n    ? performance.reduce((acc, p) => acc + p.total_cost_usd, 0)\n    : 0;\n\n  if (runsLoading || perfLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600\"></div>\n        <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Loading benchmark data...</p>\n        <div className=\"mt-4 p-4 bg-gray-100 dark:bg-gray-800 rounded-lg max-w-md\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Debug Info:</p>\n          <p className=\"text-xs text-gray-600 dark:text-gray-300\">Runs Loading: {runsLoading ? 'Yes' : 'No'}</p>\n          <p className=\"text-xs text-gray-600 dark:text-gray-300\">Performance Loading: {perfLoading ? 'Yes' : 'No'}</p>\n          {runsError && <p className=\"text-xs text-red-600 dark:text-red-400\">Error: {String(runsError)}</p>}\n          {perfError && <p className=\"text-xs text-red-600 dark:text-red-400\">Error: {String(perfError)}</p>}\n        </div>\n      </div>\n    );\n  }\n\n  // Add debug panel for production\n  const showDebugPanel = true; // Always show in production for debugging\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Debug Panel */}\n      {showDebugPanel && (\n        <div className=\"fixed bottom-4 right-4 p-3 bg-black bg-opacity-75 text-white rounded-lg text-xs max-w-sm z-50\">\n          <div className=\"font-bold mb-2\">Debug Info</div>\n          <div>Runs: {runs?.length || 0}</div>\n          <div>Performance: {performance?.length || 0}</div>\n          <div>Trends: {trends?.length || 0}</div>\n          <div>Categories: {categories?.length || 0}</div>\n          <div>Errors: {runsError || perfError ? 'Yes' : 'No'}</div>\n          <div className=\"mt-2 text-yellow-300\">Check console for details</div>\n        </div>\n      )}\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center\">\n              <Activity className=\"h-8 w-8 text-primary-600 mr-3\" />\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                AgentX Benchmark Dashboard\n              </h1>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Link \n                to=\"/jsonic-bench\"\n                className=\"flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-blue-600 text-white rounded-lg hover:from-purple-700 hover:to-blue-700 transition-all shadow-md hover:shadow-lg\"\n              >\n                <Zap className=\"h-4 w-4\" />\n                <span className=\"font-medium\">JSONIC Benchmarks</span>\n              </Link>\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                Last updated: {latestRun ? new Date(latestRun.timestamp).toLocaleString() : 'Never'}\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <MetricCard\n            title=\"Total Tests\"\n            value={totalTests}\n            icon={<Activity className=\"h-5 w-5\" />}\n            trend={runs && runs.length > 1 \n              ? ((runs[0].total_runs - runs[1].total_runs) / runs[1].total_runs) * 100\n              : 0}\n            format=\"number\"\n          />\n          <MetricCard\n            title=\"Success Rate\"\n            value={successRate}\n            icon={<CheckCircle className=\"h-5 w-5\" />}\n            trend={runs && runs.length > 1 \n              ? successRate - (runs[1].successful_runs / runs[1].total_runs) * 100\n              : 0}\n            format=\"percentage\"\n            invertTrend={false}\n          />\n          <MetricCard\n            title=\"Avg TTFT\"\n            value={avgTTFT}\n            icon={<Clock className=\"h-5 w-5\" />}\n            trend={trends \n              ? trends.find(t => t.metric_name === 'avg_ttft_ms')?.change_percentage || 0\n              : 0}\n            format=\"duration\"\n            invertTrend={true}\n          />\n          <MetricCard\n            title=\"Total Cost\"\n            value={totalCost}\n            icon={<DollarSign className=\"h-5 w-5\" />}\n            trend={0}\n            format=\"currency\"\n            invertTrend={true}\n          />\n        </div>\n\n        {/* Performance Trends */}\n        {trends && !trendsLoading && (\n          <div className=\"mb-8\">\n            <TrendIndicators trends={trends} />\n          </div>\n        )}\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <PerformanceChart \n            performance={performance || []} \n            title=\"Response Time by Model\"\n            metric=\"ttft\"\n          />\n          <PerformanceChart \n            performance={performance || []} \n            title=\"Success Rate by Model\"\n            metric=\"success\"\n          />\n        </div>\n\n        {/* Model Comparison Table - Collapsible */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-8\">\n          <div \n            className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors\"\n            onClick={() => setIsModelComparisonExpanded(!isModelComparisonExpanded)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Model Performance Comparison\n              </h2>\n              <button className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors\">\n                {isModelComparisonExpanded ? (\n                  <ChevronUp className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                ) : (\n                  <ChevronDown className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                )}\n              </button>\n            </div>\n          </div>\n          {isModelComparisonExpanded && (\n            <ModelComparisonTable performance={performance || []} />\n          )}\n        </div>\n\n        {/* Category Breakdown and Recent Runs */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <CategoryBreakdown categories={categories || []} />\n          <RecentRuns runs={runs || []} />\n        </div>\n\n        {/* Prompt Summary - Collapsible */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 mb-8\">\n          <div \n            className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors\"\n            onClick={() => setIsPromptsExpanded(!isPromptsExpanded)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <FileText className=\"h-5 w-5 text-gray-500 dark:text-gray-400 mr-2\" />\n                <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  Test Prompts Overview\n                </h2>\n              </div>\n              <button className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors\">\n                {isPromptsExpanded ? (\n                  <ChevronUp className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                ) : (\n                  <ChevronDown className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                )}\n              </button>\n            </div>\n          </div>\n          {isPromptsExpanded && (\n            <PromptSummary runId={latestRun?.run_id} />\n          )}\n        </div>\n\n        {/* Detailed Test Results - Collapsible */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700\">\n          <div \n            className=\"px-6 py-4 border-b border-gray-200 dark:border-gray-700 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-750 transition-colors\"\n            onClick={() => setIsTestResultsExpanded(!isTestResultsExpanded)}\n          >\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                Detailed Test Results\n              </h2>\n              <button className=\"p-1 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors\">\n                {isTestResultsExpanded ? (\n                  <ChevronUp className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                ) : (\n                  <ChevronDown className=\"h-5 w-5 text-gray-500 dark:text-gray-400\" />\n                )}\n              </button>\n            </div>\n          </div>\n          {isTestResultsExpanded && (\n            <TestResultsTable runId={latestRun?.run_id} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}","import { useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ArrowLeft, Activity, Zap } from 'lucide-react';\n\nexport default function JsonicBenchmark() {\n  useEffect(() => {\n    // Create iframe to load the benchmark page\n    const container = document.getElementById('benchmark-container');\n    if (container && !container.querySelector('iframe')) {\n      const iframe = document.createElement('iframe');\n      const basePath = import.meta.env.BASE_URL || '/';\n      iframe.src = `${basePath}jsonic-bench/index.html`;\n      iframe.style.width = '100%';\n      iframe.style.height = '100%';\n      iframe.style.border = 'none';\n      iframe.title = 'JSONIC Benchmarks';\n      container.appendChild(iframe);\n    }\n\n    // Cleanup on unmount\n    return () => {\n      const container = document.getElementById('benchmark-container');\n      if (container) {\n        container.innerHTML = '';\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 to-blue-50 dark:from-gray-900 dark:to-gray-800\">\n      {/* Header */}\n      <header className=\"bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center gap-4\">\n              <Link \n                to=\"/\"\n                className=\"flex items-center gap-2 text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400 transition-colors\"\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n                <span className=\"font-medium\">Back to Dashboard</span>\n              </Link>\n              \n              <div className=\"h-6 w-px bg-gray-300 dark:bg-gray-600\" />\n              \n              <div className=\"flex items-center gap-2\">\n                <Zap className=\"h-6 w-6 text-purple-600\" />\n                <h1 className=\"text-xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n                  JSONIC Performance Benchmarks\n                </h1>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-2 text-sm text-gray-500 dark:text-gray-400\">\n              <Activity className=\"h-4 w-4\" />\n              <span>Compare storage solutions</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Iframe Container */}\n      <div \n        id=\"benchmark-container\" \n        className=\"w-full\"\n        style={{ height: 'calc(100vh - 64px)' }}\n      />\n    </div>\n  );\n}","import { useEffect, useState } from 'react';\nimport { Database, CheckCircle, AlertCircle, Loader2 } from 'lucide-react';\n\ninterface LoadingOverlayProps {\n  phase: 'checking' | 'loading' | 'migrating' | 'complete' | 'error' | 'idle';\n  current: number;\n  total: number;\n  message: string;\n  percentage: number;\n  onComplete?: () => void;\n}\n\nexport default function LoadingOverlay({\n  phase,\n  current,\n  total,\n  message,\n  percentage,\n  onComplete\n}: LoadingOverlayProps) {\n  const [isVisible, setIsVisible] = useState(true);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    if (phase === 'complete') {\n      // Add a small delay to show completion\n      const timer = setTimeout(() => {\n        setIsAnimating(true);\n        setTimeout(() => {\n          setIsVisible(false);\n          onComplete?.();\n        }, 300);\n      }, 500);\n      return () => clearTimeout(timer);\n    }\n  }, [phase, onComplete]);\n\n  if (!isVisible || phase === 'idle') {\n    return null;\n  }\n\n  const getIcon = () => {\n    switch (phase) {\n      case 'checking':\n      case 'loading':\n      case 'migrating':\n        return <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />;\n      case 'complete':\n        return <CheckCircle className=\"h-8 w-8 text-green-500\" />;\n      case 'error':\n        return <AlertCircle className=\"h-8 w-8 text-red-500\" />;\n      default:\n        return <Database className=\"h-8 w-8 text-gray-400\" />;\n    }\n  };\n\n  const getProgressColor = () => {\n    switch (phase) {\n      case 'complete':\n        return 'bg-green-500';\n      case 'error':\n        return 'bg-red-500';\n      default:\n        return 'bg-primary-600';\n    }\n  };\n\n  return (\n    <div \n      className={`fixed inset-0 z-50 flex items-center justify-center bg-gray-900/50 backdrop-blur-sm transition-opacity duration-300 ${\n        isAnimating ? 'opacity-0' : 'opacity-100'\n      }`}\n    >\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 max-w-md w-full mx-4\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          {/* Icon */}\n          <div className=\"flex items-center justify-center\">\n            {getIcon()}\n          </div>\n\n          {/* Title */}\n          <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            {phase === 'checking' && 'Initializing Database'}\n            {phase === 'loading' && 'Loading Data'}\n            {phase === 'migrating' && 'Processing Documents'}\n            {phase === 'complete' && 'Ready!'}\n            {phase === 'error' && 'Error'}\n          </h2>\n\n          {/* Message */}\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 text-center\">\n            {message}\n          </p>\n\n          {/* Progress Bar */}\n          {phase !== 'error' && (\n            <div className=\"w-full\">\n              <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                <span>\n                  {phase === 'migrating' ? `${current} / ${total} documents` : ''}\n                </span>\n                <span>{Math.round(percentage)}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2 overflow-hidden\">\n                <div\n                  className={`h-full rounded-full transition-all duration-300 ease-out ${getProgressColor()}`}\n                  style={{ width: `${percentage}%` }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Additional Info for Migration */}\n          {phase === 'migrating' && total > 0 && (\n            <div className=\"text-xs text-gray-500 dark:text-gray-500 space-y-1\">\n              <div>Processing at ~{Math.round(current / (percentage / 100) / 10) * 10} docs/sec</div>\n              {percentage > 0 && percentage < 100 && (\n                <div>\n                  Est. time remaining: {Math.ceil((total - current) / (current / (percentage / 20)))}s\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Error Details */}\n          {phase === 'error' && (\n            <div className=\"w-full p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n              <p className=\"text-xs text-red-700 dark:text-red-400 font-mono\">\n                {message}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Optimized migration using batch inserts for high performance\n * Uses JSONIC's native insert_many for bulk operations\n */\n\nimport { jsonicService } from './jsonicService';\n\n// Declare the extended database interface with insert_many\ninterface ExtendedDatabase {\n  insert(data: any): Promise<string>;\n  insert_many?(documents: string): Promise<string>; // WASM method for batch insert\n  get(id: string): Promise<any>;\n  update(id: string, data: any): Promise<boolean>;\n  delete(id: string): Promise<boolean>;\n  list(): Promise<string[]>;\n  stats(): Promise<any>;\n  query(filter: any, options?: any): Promise<any[]>;\n  find(filter?: any): any;\n  findOne(filter?: any): Promise<any>;\n}\n\nexport async function performSimpleMigration(\n  onProgress?: (progress: any) => void\n): Promise<boolean> {\n  try {\n    console.log('🚀 Starting optimized batch migration...');\n    \n    // Initialize JSONIC in main thread\n    onProgress?.({\n      phase: 'loading',\n      current: 0,\n      total: 100,\n      message: 'Initializing database...',\n      percentage: 5\n    });\n\n    await jsonicService.initialize();\n    \n    // Check if data already exists\n    const stats = await jsonicService.getStats();\n    if (stats && stats.document_count > 0) {\n      console.log(`Database already contains ${stats.document_count} documents, skipping migration`);\n      onProgress?.({\n        phase: 'complete',\n        current: stats.document_count,\n        total: stats.document_count,\n        message: `Database ready with ${stats.document_count} documents`,\n        percentage: 100\n      });\n      return true;\n    }\n\n    onProgress?.({\n      phase: 'loading',\n      current: 0,\n      total: 100,\n      message: 'Loading data...',\n      percentage: 10\n    });\n\n    // Fetch the data\n    const basePath = '/agentx-benchmark-ui/';\n    const response = await fetch(`${basePath}data/database.json`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch database: ${response.status}`);\n    }\n\n    const jsonData = await response.json();\n    \n    const totalDocs = \n      (jsonData.benchmark_runs?.length || 0) +\n      (jsonData.model_performance?.length || 0) +\n      (jsonData.test_results?.length || 0) +\n      (jsonData.performance_trends?.length || 0);\n\n    console.log(`Loading ${totalDocs} documents into JSONIC using batch insert...`);\n    \n    let processed = 0;\n    \n    // Helper to add metadata\n    const addMetadata = (type: string, doc: any, runId?: string) => ({\n      _type: type,\n      _runId: runId,\n      _timestamp: new Date().toISOString(),\n      ...doc\n    });\n\n    // Get the raw database instance for batch operations\n    const db = await jsonicService.getDatabase() as ExtendedDatabase;\n    \n    // Process benchmark runs using batch insert\n    if (jsonData.benchmark_runs && jsonData.benchmark_runs.length > 0) {\n      onProgress?.({\n        phase: 'migrating',\n        current: processed,\n        total: totalDocs,\n        message: 'Batch loading benchmark runs...',\n        percentage: 20\n      });\n\n      const benchmarkDocs = jsonData.benchmark_runs.map((run: any) => \n        addMetadata('benchmark_run', run)\n      );\n      \n      // Use batch insert if available, otherwise fall back to parallel inserts\n      if (db.insert_many) {\n        const result = await db.insert_many(JSON.stringify(benchmarkDocs));\n        // Handle both string and object responses\n        const parsed = typeof result === 'string' ? JSON.parse(result) : result;\n        if (parsed.success || parsed.data) {\n          processed += benchmarkDocs.length;\n          console.log(`Batch loaded ${benchmarkDocs.length} benchmark runs`);\n        }\n      } else {\n        // Fallback to parallel inserts\n        const promises = benchmarkDocs.map((doc: any) => jsonicService.insert(doc));\n        await Promise.all(promises);\n        processed += benchmarkDocs.length;\n        console.log(`Loaded ${benchmarkDocs.length} benchmark runs in parallel`);\n      }\n    }\n\n    // Process model performance using batch insert\n    if (jsonData.model_performance && jsonData.model_performance.length > 0) {\n      onProgress?.({\n        phase: 'migrating',\n        current: processed,\n        total: totalDocs,\n        message: 'Batch loading model performance...',\n        percentage: 40\n      });\n\n      const perfDocs = jsonData.model_performance.map((perf: any) => \n        addMetadata('model_performance', perf, perf.run_id)\n      );\n      \n      if (db.insert_many) {\n        const result = await db.insert_many(JSON.stringify(perfDocs));\n        // Handle both string and object responses\n        const parsed = typeof result === 'string' ? JSON.parse(result) : result;\n        if (parsed.success || parsed.data) {\n          processed += perfDocs.length;\n          console.log(`Batch loaded ${perfDocs.length} model performance records`);\n        }\n      } else {\n        const promises = perfDocs.map((doc: any) => jsonicService.insert(doc));\n        await Promise.all(promises);\n        processed += perfDocs.length;\n        console.log(`Loaded ${perfDocs.length} model performance records in parallel`);\n      }\n    }\n\n    // Process test results using batch insert with chunking for large datasets\n    if (jsonData.test_results && jsonData.test_results.length > 0) {\n      onProgress?.({\n        phase: 'migrating',\n        current: processed,\n        total: totalDocs,\n        message: 'Batch loading test results...',\n        percentage: 60\n      });\n\n      const testDocs = jsonData.test_results.map((result: any) => \n        addMetadata('test_result', result, result.run_id)\n      );\n      \n      // Process in chunks to avoid memory issues and provide progress updates\n      const chunkSize = 100;\n      for (let i = 0; i < testDocs.length; i += chunkSize) {\n        const chunk = testDocs.slice(i, Math.min(i + chunkSize, testDocs.length));\n        \n        if (db.insert_many) {\n          const result = await db.insert_many(JSON.stringify(chunk));\n          // Handle both string and object responses\n          const parsed = typeof result === 'string' ? JSON.parse(result) : result;\n          if (parsed.success || parsed.data) {\n            processed += chunk.length;\n          }\n        } else {\n          const promises = chunk.map((doc: any) => jsonicService.insert(doc));\n          await Promise.all(promises);\n          processed += chunk.length;\n        }\n        \n        // Update progress\n        const percentage = 60 + ((processed - jsonData.benchmark_runs.length - jsonData.model_performance.length) / jsonData.test_results.length * 25);\n        onProgress?.({\n          phase: 'migrating',\n          current: processed,\n          total: totalDocs,\n          message: `Processing test results... (${processed}/${totalDocs})`,\n          percentage\n        });\n      }\n      \n      console.log(`Batch loaded ${testDocs.length} test results`);\n    }\n\n    // Process performance trends using batch insert\n    if (jsonData.performance_trends && jsonData.performance_trends.length > 0) {\n      onProgress?.({\n        phase: 'migrating',\n        current: processed,\n        total: totalDocs,\n        message: 'Batch loading performance trends...',\n        percentage: 85\n      });\n\n      const trendDocs = jsonData.performance_trends.map((trend: any) => \n        addMetadata('performance_trend', trend)\n      );\n      \n      if (db.insert_many) {\n        const result = await db.insert_many(JSON.stringify(trendDocs));\n        // Handle both string and object responses\n        const parsed = typeof result === 'string' ? JSON.parse(result) : result;\n        if (parsed.success || parsed.data) {\n          processed += trendDocs.length;\n          console.log(`Batch loaded ${trendDocs.length} performance trends`);\n        }\n      } else {\n        const promises = trendDocs.map((doc: any) => jsonicService.insert(doc));\n        await Promise.all(promises);\n        processed += trendDocs.length;\n        console.log(`Loaded ${trendDocs.length} performance trends in parallel`);\n      }\n    }\n\n    // Verify the data\n    const finalStats = await jsonicService.getStats();\n    console.log('Migration complete. Final stats:', finalStats);\n\n    onProgress?.({\n      phase: 'complete',\n      current: totalDocs,\n      total: totalDocs,\n      message: `✅ Migration complete! ${totalDocs} documents loaded.`,\n      percentage: 100\n    });\n\n    return true;\n  } catch (error) {\n    console.error('Migration failed:', error);\n    onProgress?.({\n      phase: 'error',\n      current: 0,\n      total: 100,\n      message: error instanceof Error ? error.message : 'Migration failed',\n      percentage: 0\n    });\n    return false;\n  }\n}","import { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { ReactQueryDevtools } from '@tanstack/react-query-devtools';\nimport Dashboard from './Dashboard';\nimport JsonicBenchmark from './JsonicBenchmark';\nimport LoadingOverlay from './LoadingOverlay';\nimport { setMigrationProgressCallback } from '../services/api-jsonic';\nimport { performSimpleMigration } from '../services/simpleMigration';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      refetchOnWindowFocus: false,\n      retry: 1,\n      staleTime: 30000, // 30 seconds\n    },\n  },\n});\n\ninterface MigrationProgress {\n  phase: 'checking' | 'loading' | 'migrating' | 'complete' | 'error' | 'idle';\n  current: number;\n  total: number;\n  message: string;\n  percentage: number;\n}\n\nexport default function AppRouter() {\n  const [migrationProgress, setMigrationProgress] = useState<MigrationProgress>({\n    phase: 'idle',\n    current: 0,\n    total: 0,\n    message: '',\n    percentage: 0\n  });\n\n  const [isReady, setIsReady] = useState(false);\n  const [currentPath, setCurrentPath] = useState(window.location.pathname);\n\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      // Check if we're on the benchmark page - skip initialization\n      const path = window.location.pathname;\n      setCurrentPath(path);\n      \n      if (path.includes('/jsonic-bench')) {\n        setIsReady(true);\n        return;\n      }\n\n      try {\n        // Set up progress callback for Web Worker migration\n        setMigrationProgressCallback((progress) => {\n          console.log('Worker migration progress:', progress);\n          setMigrationProgress(progress);\n          \n          if (progress.phase === 'complete') {\n            setTimeout(() => {\n              setIsReady(true);\n            }, 500);\n          } else if (progress.phase === 'error') {\n            console.error('Worker migration error:', progress.message);\n          }\n        });\n\n        // Start loading with Web Worker (works on mobile and desktop)\n        setMigrationProgress({\n          phase: 'checking',\n          current: 0,\n          total: 100,\n          message: 'Initializing database...',\n          percentage: 0\n        });\n\n        // Use simple migration that stores in main thread\n        console.log('🚀 Starting database migration...');\n        const success = await performSimpleMigration((progress) => {\n          console.log('Migration progress:', progress);\n          setMigrationProgress(progress);\n          \n          if (progress.phase === 'complete') {\n            setTimeout(() => {\n              setIsReady(true);\n            }, 500);\n          } else if (progress.phase === 'error') {\n            console.error('Migration error:', progress.message);\n          }\n        });\n\n        if (success) {\n          console.log('✅ Database migration completed successfully');\n        } else {\n          console.error('❌ Database migration failed');\n          setMigrationProgress({\n            phase: 'error',\n            current: 0,\n            total: 100,\n            message: 'Database initialization failed',\n            percentage: 0\n          });\n        }\n      } catch (error) {\n        console.error('❌ Failed to initialize database:', error);\n        setMigrationProgress({\n          phase: 'error',\n          current: 0,\n          total: 100,\n          message: 'Database initialization failed',\n          percentage: 0\n        });\n      }\n    };\n\n    initializeDatabase();\n  }, []);\n\n  // Use hash routing for GitHub Pages compatibility\n  const basename = import.meta.env.BASE_URL || '/';\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router basename={basename}>\n        {!isReady && !currentPath.includes('/jsonic-bench') && (\n          <LoadingOverlay\n            {...migrationProgress}\n            onComplete={() => setIsReady(true)}\n          />\n        )}\n        \n        <Routes>\n          <Route path=\"/\" element={isReady ? <Dashboard /> : null} />\n          <Route path=\"/jsonic-bench\" element={<JsonicBenchmark />} />\n        </Routes>\n        \n        <ReactQueryDevtools initialIsOpen={false} />\n      </Router>\n    </QueryClientProvider>\n  );\n}","import { useEffect } from 'react';\nimport AppRouter from './components/AppRouter';\nimport { PerformanceMonitor } from './components/PerformanceMonitor';\n\nfunction App() {\n  useEffect(() => {\n    console.log('[APP] Application started');\n    console.log('[APP] Environment:', {\n      mode: import.meta.env.MODE,\n      isDev: import.meta.env.DEV,\n      isProd: import.meta.env.PROD,\n      baseUrl: import.meta.env.BASE_URL,\n      location: window.location.href,\n      pathname: window.location.pathname,\n      origin: window.location.origin\n    });\n    \n    // Log browser capabilities\n    console.log('[APP] Browser capabilities:', {\n      serviceWorker: 'serviceWorker' in navigator,\n      webWorker: typeof Worker !== 'undefined',\n      indexedDB: 'indexedDB' in window,\n      localStorage: 'localStorage' in window,\n      webAssembly: typeof WebAssembly !== 'undefined'\n    });\n  }, []);\n  \n  return (\n    <>\n      <AppRouter />\n      {import.meta.env.DEV && <PerformanceMonitor enabled={true} />}\n    </>\n  );\n}\n\nexport default App;","import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n"],"file":"assets/index-B2jgsEbE.js"}
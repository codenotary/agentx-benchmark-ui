class g{static instance;db=null;initPromise=null;jsonicModule=null;constructor(){}static getInstance(){return g.instance||(g.instance=new g),g.instance}async initialize(){if(!this.db)return this.initPromise||(this.initPromise=this.performInitialization()),this.initPromise}async performInitialization(){const e=performance.now();console.log("[JSONIC] Starting initialization...");try{const t="/agentx-benchmark-ui/",a=typeof window>"u"&&typeof self<"u",n=new URLSearchParams(window.location.search).get("wrapper")||void 0||"hybrid";let r;a?r=`${t}jsonic-worker-wrapper.js`:n==="lightweight"||n==="v1"?(console.log("[JSONIC] Using LIGHTWEIGHT v1 wrapper for faster init"),r=`${t}jsonic-wrapper.esm.js`):n==="v3"?(console.log("[JSONIC] Using FULL v3.1 wrapper with all features"),r=`${t}jsonic-wrapper-v3.esm.js`):(console.log("[JSONIC] Using HYBRID wrapper (v4) - fast init + progressive features"),r=`${t}jsonic-hybrid/index.js`),console.log("[JSONIC] Loading wrapper from:",r);const d=performance.now(),u=await import(r);if(this.jsonicModule=u.default,console.log(`[JSONIC] Module loaded in ${(performance.now()-d).toFixed(2)}ms`),!this.jsonicModule)throw new Error("JSONIC module not found");let s;a?s="/agentx-benchmark-ui/jsonic_wasm_bg.wasm":s=window.location.pathname.startsWith("/agentx-benchmark-ui/")?"/agentx-benchmark-ui/jsonic_wasm_bg.wasm":`${t}jsonic_wasm_bg.wasm`;const i=performance.now(),c={wasmUrl:s,debug:!0,enablePersistence:!1,persistenceKey:"agentx_benchmark_db"};(n==="v3"||n==="hybrid")&&(c.cacheSize=100,c.enableQueryCache=!0,c.enableBatchOptimization=!0,c.memoryLimit=100*1024*1024,c.indexHints={testId:"hash",timestamp:"btree",status:"hash",agentId:"hash",type:"hash"},n==="hybrid"&&(c.preloadFeatures=["cache","batch"])),this.jsonicModule.configure(c),console.log(`[JSONIC] Configuration completed in ${(performance.now()-i).toFixed(2)}ms`),console.log("JSONIC version:",this.jsonicModule.version),console.log("WASM URL:",s),console.log("Features: Query caching, Batch operations, Index optimization, OPFS persistence");const h=performance.now();this.db=await this.jsonicModule.createDatabase({enablePersistence:!1,persistenceKey:"agentx_benchmark_db",cacheSize:100,enableQueryCache:!0,enableBatchOptimization:!0,memoryLimit:100*1024*1024,indexHints:{testId:"hash",timestamp:"btree",status:"hash",agentId:"hash",type:"hash"},debug:!0}),console.log(`[JSONIC] Database created in ${(performance.now()-h).toFixed(2)}ms`),console.log("JSONIC v3.1 database initialized with performance optimizations");const p=performance.now(),w=await this.db.stats();console.log(`[JSONIC] Stats retrieved in ${(performance.now()-p).toFixed(2)}ms`),console.log("JSONIC stats:",w);const b=performance.now()-e;console.log(`[JSONIC] Total initialization time: ${b.toFixed(2)}ms`),b>1e3&&console.warn(`[JSONIC] ⚠️ Slow initialization detected: ${b.toFixed(2)}ms`)}catch(t){throw console.error("Failed to initialize JSONIC:",t),console.error(`[JSONIC] Failed after ${(performance.now()-e).toFixed(2)}ms`),t}}async getDatabase(){if(this.db||await this.initialize(),!this.db)throw new Error("JSONIC database not initialized");return this.db}async insert(e){return(await this.getDatabase()).insert(e)}async get(e){return(await this.getDatabase()).get(e)}async update(e,t){if(!await(await this.getDatabase()).update(e,t))throw new Error("Failed to update document")}async delete(e){if(!await(await this.getDatabase()).delete(e))throw new Error("Failed to delete document")}async listIds(){return(await this.getDatabase()).list()}async getStats(){return(await this.getDatabase()).stats()}async query(e){const t=await this.getDatabase(),a=await t.list(),o=[];for(const n of a){const r=await t.get(n);r&&r.content&&e(r.content)&&o.push({id:n,...r.content})}return o}async findDocuments(e,t){return(await this.getDatabase()).query(e,t)}async findOne(e){return(await this.getDatabase()).findOne(e)}find(e={}){const t=this.getDatabase(),a={sort:function(n){return this},limit:function(n){return this},skip:function(n){return this},project:function(n){return this},exec:async function(){return(await t).find(e).exec()},toArray:async function(){return(await t).find(e).toArray()},count:async function(){return(await t).find(e).count()}};let o={};return a.sort=n=>(o.sort=Object.entries(n).map(([r,d])=>[r,d]),a),a.limit=n=>(o.limit=n,a),a.skip=n=>(o.skip=n,a),a.project=n=>(o.projection=n,a),a.exec=async()=>(await t).query(e,o),a.toArray=async()=>(await t).query(e,o),a.count=async()=>(await t).find(e).count(),a}async insertMany(e){return(await this.getDatabase()).insertMany(e)}async updateMany(e,t){return(await this.getDatabase()).updateMany(e,t)}async deleteMany(e){return(await this.getDatabase()).deleteMany(e)}async aggregate(e){return(await this.getDatabase()).aggregate(e)}async getDebugInfo(){return(await this.getDatabase()).getDebugInfo()}async clearCache(){(await this.getDatabase()).clearCache()}async clearProfiler(){(await this.getDatabase()).clearProfiler()}async getBenchmarkStats(e){const t=[];return e&&t.push({$match:{testId:e}}),t.push({$group:{_id:"$testId",avgDuration:{$avg:"$duration"},minDuration:{$min:"$duration"},maxDuration:{$max:"$duration"},totalRuns:{$sum:1},successCount:{$sum:{$cond:[{$eq:["$status","success"]},1,0]}},failureCount:{$sum:{$cond:[{$eq:["$status","failure"]},1,0]}}}},{$sort:{totalRuns:-1}}),this.aggregate(t)}}const f=g.getInstance(),m=l=>{self.postMessage({type:"progress",payload:l})},y=async()=>{try{console.log("🔧 WORKER: Starting JSONIC migration..."),m({phase:"loading",current:0,total:100,message:"Loading data in background...",percentage:10});const l="/agentx-benchmark-ui/",e=new URL(`${l}data/database.json`,self.location.origin).href,t=await fetch(e);if(!t.ok)throw new Error(`Failed to fetch database.json: ${t.status}`);const a=await t.json(),o=(a.benchmark_runs?.length||0)+(a.model_performance?.length||0)+(a.test_results?.length||0)+(a.performance_trends?.length||0);console.log(`🔧 WORKER: Processing ${o} documents`),m({phase:"migrating",current:0,total:o,message:"Initializing JSONIC in worker...",percentage:15}),await f.initialize();let n=0;const r=50,d=async s=>{for(let i=0;i<s.length;i+=r){const c=s.slice(i,Math.min(i+r,s.length));await Promise.all(c.map(p=>f.insert(p))),n+=c.length;const h=20+n/o*70;m({phase:"migrating",current:n,total:o,message:`Processing documents... (${n}/${o})`,percentage:h})}},u=(s,i,c)=>({_type:s,_runId:c,_timestamp:new Date().toISOString(),...i});if(a.benchmark_runs){const s=a.benchmark_runs.map(i=>u("benchmark_run",i));await d(s),console.log(`🔧 WORKER: Migrated ${s.length} benchmark runs`)}if(a.model_performance){const s=a.model_performance.map(i=>u("model_performance",i,i.run_id));await d(s),console.log(`🔧 WORKER: Migrated ${s.length} model performance records`)}if(a.test_results){const s=a.test_results.map(i=>u("test_result",i,i.run_id));await d(s),console.log(`🔧 WORKER: Migrated ${s.length} test results`)}if(a.performance_trends){const s=a.performance_trends.map(i=>u("performance_trend",i));await d(s),console.log(`🔧 WORKER: Migrated ${s.length} performance trends`)}m({phase:"complete",current:o,total:o,message:`✅ Migration complete! ${o} documents processed.`,percentage:100}),console.log(`🎉 WORKER: Migration successful - ${o} documents`),self.postMessage({type:"migrationComplete",payload:!0})}catch(l){console.error("❌ WORKER: Migration failed:",l),m({phase:"error",current:0,total:100,message:l instanceof Error?l.message:"Unknown worker error",percentage:0}),self.postMessage({type:"migrationComplete",payload:!1})}};self.onmessage=l=>{l.data.type==="startMigration"&&y()};
//# sourceMappingURL=migration.worker-D6DBfY5L.js.map

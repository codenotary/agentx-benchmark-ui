{"version":3,"file":"optimizedMigration-C0l4NldW.js","sources":["../../src/services/optimizedMigration.ts"],"sourcesContent":["import { jsonicService } from './jsonicService';\nimport type {\n  BenchmarkRun,\n  ModelPerformance,\n  TestResult,\n  PerformanceTrend\n} from '../types/benchmark';\n\ninterface MigrationProgress {\n  phase: 'checking' | 'loading' | 'migrating' | 'complete' | 'error';\n  current: number;\n  total: number;\n  message: string;\n  percentage: number;\n}\n\ntype ProgressCallback = (progress: MigrationProgress) => void;\n\n// Helper to create document with type tagging\nfunction createDocument(type: string, data: any, runId?: string): any {\n  return {\n    _type: type,\n    _runId: runId,\n    _timestamp: new Date().toISOString(),\n    ...data\n  };\n}\n\n// Check if migration is needed\nasync function isMigrationNeeded(): Promise<boolean> {\n  try {\n    // Initialize JSONIC first\n    await jsonicService.initialize();\n    \n    // Check if we have data in JSONIC\n    const stats = await jsonicService.getStats();\n    console.log('JSONIC stats:', stats);\n    \n    // If we have documents, check if they're fresh\n    if (stats?.document_count > 0) {\n      // Get the most recent benchmark run\n      const db = await jsonicService.getDatabase();\n      const runs = await db.find({ _type: 'benchmark_run' })\n        .sort({ timestamp: -1 })\n        .limit(1)\n        .exec();\n      \n      if (runs && runs.length > 0) {\n        // Check if data is less than 5 minutes old\n        const lastUpdate = new Date(runs[0]._timestamp || runs[0].timestamp);\n        const now = new Date();\n        const ageMinutes = (now.getTime() - lastUpdate.getTime()) / (1000 * 60);\n        \n        console.log(`Data age: ${ageMinutes.toFixed(1)} minutes`);\n        \n        // Consider data fresh if less than 5 minutes old\n        if (ageMinutes < 5) {\n          console.log('Data is fresh, skipping migration');\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error checking migration status:', error);\n    return true; // Assume migration needed on error\n  }\n}\n\n\n// Optimized migration with progress reporting\nexport async function performOptimizedMigration(\n  onProgress?: ProgressCallback\n): Promise<boolean> {\n  try {\n    // Step 1: Check if migration is needed\n    onProgress?.({\n      phase: 'checking',\n      current: 0,\n      total: 100,\n      message: 'Checking database status...',\n      percentage: 0\n    });\n    \n    const needsMigration = await isMigrationNeeded();\n    \n    if (!needsMigration) {\n      onProgress?.({\n        phase: 'complete',\n        current: 100,\n        total: 100,\n        message: 'Database is up to date',\n        percentage: 100\n      });\n      return true;\n    }\n    \n    // Step 2: Load JSON data\n    onProgress?.({\n      phase: 'loading',\n      current: 0,\n      total: 100,\n      message: 'Loading benchmark data...',\n      percentage: 10\n    });\n    \n    const basePath = import.meta.env.BASE_URL || '/';\n    const dataUrl = `${basePath}data/database.json`;\n    const response = await fetch(dataUrl);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch database.json: ${response.status}`);\n    }\n    \n    const jsonData = await response.json();\n    \n    // Calculate total documents\n    const totalDocs = \n      (jsonData.benchmark_runs?.length || 0) +\n      (jsonData.model_performance?.length || 0) +\n      (jsonData.test_results?.length || 0) +\n      (jsonData.performance_trends?.length || 0);\n    \n    console.log(`Total documents to migrate: ${totalDocs}`);\n    \n    let migratedCount = 0;\n    \n    // Step 3: Migrate data in batches\n    onProgress?.({\n      phase: 'migrating',\n      current: migratedCount,\n      total: totalDocs,\n      message: 'Migrating benchmark runs...',\n      percentage: 20\n    });\n    \n    // Prepare all documents first\n    const allDocuments: any[] = [];\n    \n    // Prepare benchmark runs\n    if (jsonData.benchmark_runs) {\n      const docs = jsonData.benchmark_runs.map((run: BenchmarkRun) => \n        createDocument('benchmark_run', run)\n      );\n      allDocuments.push(...docs);\n    }\n    \n    // Prepare model performance\n    if (jsonData.model_performance) {\n      const docs = jsonData.model_performance.map((perf: ModelPerformance) => \n        createDocument('model_performance', perf, perf.run_id)\n      );\n      allDocuments.push(...docs);\n    }\n    \n    // Prepare test results (largest dataset)\n    if (jsonData.test_results) {\n      const docs = jsonData.test_results.map((test: TestResult) => \n        createDocument('test_result', test, test.run_id)\n      );\n      allDocuments.push(...docs);\n    }\n    \n    // Prepare performance trends\n    if (jsonData.performance_trends) {\n      const docs = jsonData.performance_trends.map((trend: PerformanceTrend) => \n        createDocument('performance_trend', trend)\n      );\n      allDocuments.push(...docs);\n    }\n    \n    // Batch insert with progress updates\n    const batchSize = 50;\n    for (let i = 0; i < allDocuments.length; i += batchSize) {\n      const batch = allDocuments.slice(i, Math.min(i + batchSize, allDocuments.length));\n      \n      // Insert batch\n      await Promise.all(\n        batch.map(doc => jsonicService.insert(doc))\n      );\n      \n      migratedCount += batch.length;\n      \n      // Update progress\n      const percentage = 20 + (migratedCount / totalDocs) * 70; // 20-90%\n      onProgress?.({\n        phase: 'migrating',\n        current: migratedCount,\n        total: totalDocs,\n        message: `Migrating documents... (${migratedCount}/${totalDocs})`,\n        percentage\n      });\n    }\n    \n    // Step 4: Complete\n    onProgress?.({\n      phase: 'complete',\n      current: totalDocs,\n      total: totalDocs,\n      message: `Migration complete! ${totalDocs} documents loaded.`,\n      percentage: 100\n    });\n    \n    console.log(`‚úÖ Migration complete! Total documents: ${migratedCount}`);\n    return true;\n    \n  } catch (error) {\n    console.error('Migration failed:', error);\n    \n    onProgress?.({\n      phase: 'error',\n      current: 0,\n      total: 100,\n      message: `Migration failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      percentage: 0\n    });\n    \n    throw error;\n  }\n}\n\n// Check and migrate with progress\nexport async function checkAndMigrateOptimized(\n  onProgress?: ProgressCallback\n): Promise<boolean> {\n  try {\n    console.log('üîç Checking JSONIC database...');\n    \n    const success = await performOptimizedMigration(onProgress);\n    \n    if (success) {\n      console.log('‚úÖ Database ready');\n    }\n    \n    return success;\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n    return false;\n  }\n}\n\n// Export for backwards compatibility\nexport const checkAndMigrate = checkAndMigrateOptimized;"],"names":["createDocument","type","data","runId","isMigrationNeeded","jsonicService","stats","runs","lastUpdate","ageMinutes","error","performOptimizedMigration","onProgress","response","jsonData","totalDocs","migratedCount","allDocuments","docs","run","perf","test","trend","batchSize","i","batch","doc","percentage","checkAndMigrateOptimized","success"],"mappings":"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"}